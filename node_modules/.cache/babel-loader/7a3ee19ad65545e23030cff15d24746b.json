{"ast":null,"code":"var _jsxFileName = \"/home/com109/Desktop/ad/my-app/src/singlepost/singlepost.js\";\nimport React from \"react\";\nimport SinglePostComponent from \"./singlepostcomponent\";\nimport fetchData from \"../shared/sharedFunctions\";\nimport { Routes } from \"../shared/config\";\nconst {\n  Likes,\n  AllComments,\n  Comments,\n  ImageData\n} = Routes;\nconst zero = 0;\n\nclass SinglePost extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.likePost = postID => {\n      let likedData = {\n        postId: postID,\n        userId: localStorage.getItem(\"userId\")\n      };\n      fetchData(Likes, likedData).then(res => {\n        if (res) {\n          let PostDataOnLike = this.state.PostData;\n          PostDataOnLike[zero].likes = res.data.dataFromDatabase[zero].likes;\n          this.setState({\n            PostData: PostDataOnLike\n          });\n        }\n      }).catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n    };\n\n    this.allComments = () => {\n      const imageId = this.state.imageId;\n      const data = {\n        imageId: imageId\n      };\n      fetchData(AllComments, data).then(res => {\n        if (res) {\n          const allCommentData = res.data.dataFromDatabase.map(data => {\n            return data;\n          });\n          this.setState({\n            comment: allCommentData\n          });\n        }\n      }).catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n    };\n\n    this.uploadComment = event => {\n      var _localStorage, _this$state, _event$target, _event$target$comment;\n\n      event.preventDefault();\n      let userid = (_localStorage = localStorage) === null || _localStorage === void 0 ? void 0 : _localStorage.getItem(\"userId\");\n      const commentData = {\n        imageId: (_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.imageId,\n        comment: (_event$target = event.target) === null || _event$target === void 0 ? void 0 : (_event$target$comment = _event$target.comment) === null || _event$target$comment === void 0 ? void 0 : _event$target$comment.value,\n        userId: userid\n      };\n      fetchData(Comments, commentData).then(res => {\n        if (res) {\n          var _res$data, _res$data$dataFromDat, _this$state2;\n\n          let comments = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$dataFromDat = _res$data.dataFromDatabase) === null || _res$data$dataFromDat === void 0 ? void 0 : _res$data$dataFromDat.map(data => {\n            return data;\n          });\n          let imageID = {\n            id: (_this$state2 = this.state) === null || _this$state2 === void 0 ? void 0 : _this$state2.imageId\n          };\n          fetchData(ImageData, imageID).then(res => {\n            if (res) {\n              var _res$data2;\n\n              this.setState({\n                PostData: [res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.dataBase[0]],\n                comment: [...comments]\n              });\n            }\n          });\n        }\n      }).catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n      event.target.comment.value = null;\n    };\n\n    this.getImageData = () => {\n      let imageID = {\n        id: this.state.imageId\n      };\n      fetchData(ImageData, imageID).then(res => {\n        if (res) {\n          this.setState({\n            PostData: [res.data.dataBase[0]]\n          });\n        }\n      }).catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n      this.allComments();\n    };\n\n    this.notLogin = () => {\n      if (!localStorage.getItem(\"userId\")) {\n        this.props.history.push(\"/login\");\n      }\n    };\n\n    this.DownloadImage = image => {\n      console.log(\">>>>>>>>>>>>>>Download\");\n      fetch(\"http://localhost:8083/\" + image).then(response => {\n        response.blob().then(blob => {\n          console.log(blob);\n          let url = window.URL.createObjectURL(blob);\n          let a = document.createElement(\"a\");\n          a.href = url;\n          a.download = image;\n          console.log(a.download);\n          a.click();\n        });\n      });\n    };\n\n    this.state = {\n      imageId: this.props.match.params.id,\n      image: \"\",\n      username: \"\",\n      comment: [],\n      caption: \"\",\n      PostData: [],\n      hasError: false\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return {\n      hasError: true\n    };\n  }\n\n  componentDidMount() {\n    this.notLogin();\n    this.getImageData();\n    window.scrollTo(0, 0);\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n  }\n\n  render() {\n    const {\n      hasError\n    } = this.state;\n\n    if (hasError) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Something went wrong\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, React.createElement(SinglePostComponent, {\n      history: this.props.history,\n      PostData: this.state.PostData,\n      likePost: this.likePost,\n      comment: this.state.comment,\n      uploadComment: this.uploadComment,\n      Download: this.DownloadImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    category: state.CategoryReducer.category\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SinglePost);","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/singlepost/singlepost.js"],"names":["React","SinglePostComponent","fetchData","Routes","Likes","AllComments","Comments","ImageData","zero","SinglePost","Component","constructor","props","likePost","postID","likedData","postId","userId","localStorage","getItem","then","res","PostDataOnLike","state","PostData","likes","data","dataFromDatabase","setState","catch","err","message","history","push","allComments","imageId","allCommentData","map","comment","uploadComment","event","preventDefault","userid","commentData","target","value","comments","imageID","id","dataBase","getImageData","notLogin","DownloadImage","image","console","log","fetch","response","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","click","match","params","username","caption","hasError","getDerivedStateFromError","error","componentDidMount","scrollTo","updateLoginState","render","mapStateToProps","category","CategoryReducer","mapDispatchToProps","dispatch","connect"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport SinglePostComponent from \"./singlepostcomponent\";\nimport fetchData from \"../shared/sharedFunctions\";\nimport { Routes } from \"../shared/config\";\n\nconst { Likes, AllComments, Comments, ImageData } = Routes;\nconst zero = 0;\n\nclass SinglePost extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageId: this.props.match.params.id,\n      image: \"\",\n      username: \"\",\n      comment: [],\n      caption: \"\",\n      PostData: [],\n      hasError: false\n    };\n  }\n  likePost = postID => {\n    let likedData = {\n      postId: postID,\n      userId: localStorage.getItem(\"userId\")\n    };\n    fetchData(Likes, likedData)\n      .then(res => {\n        if (res) {\n          let PostDataOnLike = this.state.PostData;\n          PostDataOnLike[zero].likes = res.data.dataFromDatabase[zero].likes;\n          this.setState({ PostData: PostDataOnLike });\n        }\n      })\n      .catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n  };\n\n  allComments = () => {\n    const imageId = this.state.imageId;\n    const data = {\n      imageId: imageId\n    };\n    fetchData(AllComments, data)\n      .then(res => {\n        if (res) {\n          const allCommentData = res.data.dataFromDatabase.map(data => {\n            return data;\n          });\n          this.setState({ comment: allCommentData });\n        }\n      })\n      .catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n  };\n\n  uploadComment = event => {\n    event.preventDefault();\n    let userid = localStorage?.getItem(\"userId\");\n    const commentData = {\n      imageId: this.state?.imageId,\n      comment: event.target?.comment?.value,\n      userId: userid\n    };\n    fetchData(Comments, commentData)\n      .then(res => {\n        if (res) {\n          let comments = res?.data?.dataFromDatabase?.map(data => {\n            return data;\n          });\n\n          let imageID = { id: this.state?.imageId };\n          fetchData(ImageData, imageID).then(res => {\n            if (res) {\n              this.setState({\n                PostData: [res?.data?.dataBase[0]],\n                comment: [...comments]\n              });\n            }\n          });\n        }\n      })\n      .catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n    event.target.comment.value = null;\n  };\n  getImageData = () => {\n    let imageID = { id: this.state.imageId };\n    fetchData(ImageData, imageID)\n      .then(res => {\n        if (res) {\n          this.setState({ PostData: [res.data.dataBase[0]] });\n        }\n      })\n      .catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n    this.allComments();\n  };\n\n  notLogin = () => {\n    if (!localStorage.getItem(\"userId\")) {\n      this.props.history.push(\"/login\");\n    }\n  };\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  DownloadImage = image => {\n    console.log(\">>>>>>>>>>>>>>Download\");\n\n    fetch(\"http://localhost:8083/\" + image).then(response => {\n      response.blob().then(blob => {\n        console.log(blob);\n        let url = window.URL.createObjectURL(blob);\n        let a = document.createElement(\"a\");\n        a.href = url;\n        a.download = image;\n        console.log(a.download);\n        a.click();\n      });\n    });\n  };\n\n  componentDidMount() {\n    this.notLogin();\n    this.getImageData();\n    window.scrollTo(0, 0);\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n  }\n  render() {\n    const { hasError } = this.state;\n    if (hasError) {\n      return <div>Something went wrong</div>;\n    }\n    return (\n      <div>\n        <SinglePostComponent\n          history={this.props.history}\n          PostData={this.state.PostData}\n          likePost={this.likePost}\n          comment={this.state.comment}\n          uploadComment={this.uploadComment}\n          Download={this.DownloadImage}\n        />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { category: state.CategoryReducer.category };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SinglePost);\n"]},"metadata":{},"sourceType":"module"}