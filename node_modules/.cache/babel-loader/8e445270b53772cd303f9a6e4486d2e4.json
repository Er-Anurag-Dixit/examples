{"ast":null,"code":"var _jsxFileName = \"/home/com109/Desktop/ad/my-app/src/singlepost/singlepost.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateLoginState } from \"../redux/actions\";\nimport SinglePostComponent from \"./singlepostcomponent\";\nimport { Routes } from \"../config\";\nimport fetchData from \"../shared/sharedFunctions\";\nconst {\n  Likes,\n  AllComments,\n  Comments,\n  ImageData\n} = Routes;\nconst zero = 0;\n\nclass SinglePost extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.likePost = postID => {\n      let likedData = {\n        postId: postID,\n        userId: localStorage.getItem(\"userId\")\n      };\n      fetchData(Likes, likedData).then(res => {\n        if (res) {\n          let PostDataOnLike = this.state.PostData;\n          PostDataOnLike[zero].likes = res.data.dataFromDatabase[zero].likes;\n          this.setState({\n            PostData: PostDataOnLike\n          });\n        }\n      }).catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n    };\n\n    this.uploadComment = event => {\n      var _localStorage, _this$state, _event$target, _event$target$comment;\n\n      event.preventDefault();\n      let userid = (_localStorage = localStorage) === null || _localStorage === void 0 ? void 0 : _localStorage.getItem(\"userId\");\n      const commentData = {\n        imageId: (_this$state = this.state) === null || _this$state === void 0 ? void 0 : _this$state.imageId,\n        comment: (_event$target = event.target) === null || _event$target === void 0 ? void 0 : (_event$target$comment = _event$target.comment) === null || _event$target$comment === void 0 ? void 0 : _event$target$comment.value,\n        userId: userid\n      };\n      fetchData(Comments, commentData).then(res => {\n        if (res) {\n          var _res$data, _res$data$dataFromDat;\n\n          let comments = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$dataFromDat = _res$data.dataFromDatabase) === null || _res$data$dataFromDat === void 0 ? void 0 : _res$data$dataFromDat.map(data => {\n            return data;\n          });\n          console.log(\"commnt\", comments);\n          let postData = this.state.PostData;\n          postData[0].noOfComments = String(Number(postData[0].noOfComments) + 1);\n          console.log(postData);\n          this.setState({\n            PostData: postData\n          }); // let imageID = { id: this.state?.imageId };\n          // fetchData(ImageData, imageID).then(res => {\n          //   if (res) {\n          //     this.setState({\n          //       PostData: [res?.data?.dataBase[0]],\n          //       comment: [...comments]\n          //     });\n          //   }\n          // });\n        }\n      }).catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n      event.target.comment.value = null;\n    };\n\n    this.getImageData = () => {\n      let imageID = {\n        id: this.state.imageId\n      };\n      fetchData(ImageData, imageID).then(res => {\n        if (res) {\n          this.setState({\n            PostData: [res.data.dataBase[0]]\n          });\n        }\n      }).catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      }); // this.allComments();\n    };\n\n    this.notLogin = () => {\n      if (!localStorage.getItem(\"userId\")) {\n        this.props.history.push(\"/login\");\n      }\n    };\n\n    this.DownloadImage = image => {\n      fetch(\"http://localhost:8083/\" + image).then(response => {\n        response.blob().then(blob => {\n          let url = window.URL.createObjectURL(blob);\n          let a = document.createElement(\"a\");\n          a.href = url;\n          a.download = image;\n          a.click();\n        });\n      });\n    };\n\n    this.state = {\n      imageId: this.props.match.params.id,\n      image: \"\",\n      username: \"\",\n      comment: [],\n      caption: \"\",\n      PostData: [],\n      hasError: false\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true\n    };\n  }\n\n  componentDidMount() {\n    this.notLogin();\n    this.getImageData();\n    window.scrollTo(0, 0);\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n  }\n\n  render() {\n    const {\n      hasError\n    } = this.state;\n\n    if (hasError) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Something went wrong\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(SinglePostComponent, {\n      history: this.props.history,\n      PostData: this.state.PostData,\n      likePost: this.likePost,\n      comment: this.state.comment,\n      uploadComment: this.uploadComment,\n      Download: this.DownloadImage,\n      imageId: this.state.imageId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    category: state.CategoryReducer.category\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SinglePost);","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/singlepost/singlepost.js"],"names":["React","connect","updateLoginState","SinglePostComponent","Routes","fetchData","Likes","AllComments","Comments","ImageData","zero","SinglePost","Component","constructor","props","likePost","postID","likedData","postId","userId","localStorage","getItem","then","res","PostDataOnLike","state","PostData","likes","data","dataFromDatabase","setState","catch","err","message","history","push","uploadComment","event","preventDefault","userid","commentData","imageId","comment","target","value","comments","map","console","log","postData","noOfComments","String","Number","getImageData","imageID","id","dataBase","notLogin","DownloadImage","image","fetch","response","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","click","match","params","username","caption","hasError","getDerivedStateFromError","error","componentDidMount","scrollTo","render","mapStateToProps","category","CategoryReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { updateLoginState } from \"../redux/actions\";\nimport SinglePostComponent from \"./singlepostcomponent\";\nimport { Routes } from \"../config\";\nimport fetchData from \"../shared/sharedFunctions\";\n\nconst { Likes, AllComments, Comments, ImageData } = Routes;\nconst zero = 0;\n\nclass SinglePost extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageId: this.props.match.params.id,\n      image: \"\",\n      username: \"\",\n      comment: [],\n      caption: \"\",\n      PostData: [],\n      hasError: false\n    };\n  }\n  likePost = postID => {\n    let likedData = {\n      postId: postID,\n      userId: localStorage.getItem(\"userId\")\n    };\n    fetchData(Likes, likedData)\n      .then(res => {\n        if (res) {\n          let PostDataOnLike = this.state.PostData;\n          PostDataOnLike[zero].likes = res.data.dataFromDatabase[zero].likes;\n          this.setState({ PostData: PostDataOnLike });\n        }\n      })\n      .catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n  };\n\n  // allComments = () => {\n  //   const imageId = this.state.imageId;\n  //   const data = {\n  //     imageId: imageId\n  //   };\n  //   fetchData(AllComments, data)\n  //     .then(res => {\n  //       if (res) {\n  //         const allCommentData = res.data.dataFromDatabase.map(data => {\n  //           return data;\n  //         });\n  //         this.setState({ comment: allCommentData });\n  //       }\n  //     })\n  //     .catch(err => {\n  //       if (err.message === \"Network Error\") {\n  //         this.props.history.push(\"/errorpage\");\n  //       }\n  //     });\n  // };\n\n  uploadComment = event => {\n    event.preventDefault();\n    let userid = localStorage?.getItem(\"userId\");\n    const commentData = {\n      imageId: this.state?.imageId,\n      comment: event.target?.comment?.value,\n      userId: userid\n    };\n    fetchData(Comments, commentData)\n      .then(res => {\n        if (res) {\n          let comments = res?.data?.dataFromDatabase?.map(data => {\n            return data;\n          });\n          console.log(\"commnt\", comments);\n          let postData = this.state.PostData;\n          postData[0].noOfComments = String(\n            Number(postData[0].noOfComments) + 1\n          );\n          console.log(postData);\n          this.setState({ PostData: postData });\n          // let imageID = { id: this.state?.imageId };\n          // fetchData(ImageData, imageID).then(res => {\n          //   if (res) {\n          //     this.setState({\n          //       PostData: [res?.data?.dataBase[0]],\n          //       comment: [...comments]\n          //     });\n          //   }\n          // });\n        }\n      })\n      .catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n    event.target.comment.value = null;\n  };\n  getImageData = () => {\n    let imageID = { id: this.state.imageId };\n    fetchData(ImageData, imageID)\n      .then(res => {\n        if (res) {\n          this.setState({ PostData: [res.data.dataBase[0]] });\n        }\n      })\n      .catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n    // this.allComments();\n  };\n\n  notLogin = () => {\n    if (!localStorage.getItem(\"userId\")) {\n      this.props.history.push(\"/login\");\n    }\n  };\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  DownloadImage = image => {\n    fetch(\"http://localhost:8083/\" + image).then(response => {\n      response.blob().then(blob => {\n        let url = window.URL.createObjectURL(blob);\n        let a = document.createElement(\"a\");\n        a.href = url;\n        a.download = image;\n        a.click();\n      });\n    });\n  };\n\n  componentDidMount() {\n    this.notLogin();\n    this.getImageData();\n    window.scrollTo(0, 0);\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n  }\n  render() {\n    const { hasError } = this.state;\n    if (hasError) {\n      return <div>Something went wrong</div>;\n    }\n    return (\n      <div>\n        <SinglePostComponent\n          history={this.props.history}\n          PostData={this.state.PostData}\n          likePost={this.likePost}\n          comment={this.state.comment}\n          uploadComment={this.uploadComment}\n          Download={this.DownloadImage}\n          imageId={this.state.imageId}\n        />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { category: state.CategoryReducer.category };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SinglePost);\n"]},"metadata":{},"sourceType":"module"}