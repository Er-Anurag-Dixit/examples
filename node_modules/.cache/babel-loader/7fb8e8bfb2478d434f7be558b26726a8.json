{"ast":null,"code":"import { takeEvery, all, put, call } from \"redux-saga/effects\";\nimport { updateCategories } from \"../redux/actions\";\nimport serverCall from \"../utilsFolder/utils\";\nimport { Routes } from \"../config\";\nconst {\n  AllCategory\n} = Routes;\nexport const all_categories = () => {\n  return {\n    type: \"all_category\"\n  };\n};\nexport const updatecategories = data => {\n  return {\n    type: \"update_category\",\n    payload: data\n  };\n};\n\nfunction* allcategories() {\n  let data = yield call(() => {\n    return serverCall(AllCategory).then(res => {\n      if (res) {\n        var _res$data, _res$data$dataFromDat;\n\n        return (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$dataFromDat = _res$data.dataFromDatabase) === null || _res$data$dataFromDat === void 0 ? void 0 : _res$data$dataFromDat.map(category => {\n          return category;\n        });\n      }\n    });\n  });\n  yield put(updateCategories(data));\n}\n\nfunction* updatecategory(data) {\n  const categoryToBeUploaded = {\n    category: data\n  };\n  serverCall(Upload_Category, categoryToBeUploaded).then(res => {\n    if (res && res.data && res.data.status === \"Category Inserted\") {\n      var _res$data2, _res$data2$dataFromDa;\n\n      let allCategory = res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$dataFromDa = _res$data2.dataFromDatabase) === null || _res$data2$dataFromDa === void 0 ? void 0 : _res$data2$dataFromDa.map(data => {\n        return data;\n      });\n      props.updateCategory(allCategory);\n    }\n  });\n}\n\nfunction* generatorFunction() {\n  yield takeLatest(\"all_category\", allcategories);\n  yield takeEvery(\"update_category\", updatecategory(updateCategories.payload));\n}\n\nexport default generatorFunction;","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/redux/saga.js"],"names":["takeEvery","all","put","call","updateCategories","serverCall","Routes","AllCategory","all_categories","type","updatecategories","data","payload","allcategories","then","res","dataFromDatabase","map","category","updatecategory","categoryToBeUploaded","Upload_Category","status","allCategory","props","updateCategory","generatorFunction","takeLatest"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,QAA0C,oBAA1C;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAkBD,MAAxB;AAEA,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,gBAAgB,GAAGC,IAAI,IAAI;AACtC,SAAO;AACLF,IAAAA,IAAI,EAAE,iBADD;AAELG,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID,CALM;;AAOP,UAAUE,aAAV,GAA0B;AACxB,MAAIF,IAAI,GAAG,MAAMR,IAAI,CAAC,MAAM;AAC1B,WAAOE,UAAU,CAACE,WAAD,CAAV,CAAwBO,IAAxB,CAA6BC,GAAG,IAAI;AACzC,UAAIA,GAAJ,EAAS;AAAA;;AACP,4BAAOA,GAAG,CAACJ,IAAX,uEAAO,UAAUK,gBAAjB,0DAAO,sBAA4BC,GAA5B,CAAgCC,QAAQ,IAAI;AACjD,iBAAOA,QAAP;AACD,SAFM,CAAP;AAGD;AACF,KANM,CAAP;AAOD,GARoB,CAArB;AASA,QAAMhB,GAAG,CAACE,gBAAgB,CAACO,IAAD,CAAjB,CAAT;AACD;;AAED,UAAUQ,cAAV,CAAyBR,IAAzB,EAA+B;AAC7B,QAAMS,oBAAoB,GAAG;AAAEF,IAAAA,QAAQ,EAAEP;AAAZ,GAA7B;AACAN,EAAAA,UAAU,CAACgB,eAAD,EAAkBD,oBAAlB,CAAV,CAAkDN,IAAlD,CAAuDC,GAAG,IAAI;AAC5D,QAAIA,GAAG,IAAIA,GAAG,CAACJ,IAAX,IAAmBI,GAAG,CAACJ,IAAJ,CAASW,MAAT,KAAoB,mBAA3C,EAAgE;AAAA;;AAC9D,UAAIC,WAAW,GAAGR,GAAH,aAAGA,GAAH,qCAAGA,GAAG,CAAEJ,IAAR,wEAAG,WAAWK,gBAAd,0DAAG,sBAA6BC,GAA7B,CAAiCN,IAAI,IAAI;AACzD,eAAOA,IAAP;AACD,OAFiB,CAAlB;AAIAa,MAAAA,KAAK,CAACC,cAAN,CAAqBF,WAArB;AACD;AACF,GARD;AASD;;AAED,UAAUG,iBAAV,GAA8B;AAC5B,QAAMC,UAAU,CAAC,cAAD,EAAiBd,aAAjB,CAAhB;AACA,QAAMb,SAAS,CAAC,iBAAD,EAAoBmB,cAAc,CAACf,gBAAgB,CAACQ,OAAlB,CAAlC,CAAf;AACD;;AAED,eAAec,iBAAf","sourcesContent":["import { takeEvery, all, put, call } from \"redux-saga/effects\";\nimport { updateCategories } from \"../redux/actions\";\nimport serverCall from \"../utilsFolder/utils\";\nimport { Routes } from \"../config\";\n\nconst { AllCategory } = Routes;\n\nexport const all_categories = () => {\n  return {\n    type: \"all_category\"\n  };\n};\n\nexport const updatecategories = data => {\n  return {\n    type: \"update_category\",\n    payload: data\n  };\n};\n\nfunction* allcategories() {\n  let data = yield call(() => {\n    return serverCall(AllCategory).then(res => {\n      if (res) {\n        return res.data?.dataFromDatabase?.map(category => {\n          return category;\n        });\n      }\n    });\n  });\n  yield put(updateCategories(data));\n}\n\nfunction* updatecategory(data) {\n  const categoryToBeUploaded = { category: data };\n  serverCall(Upload_Category, categoryToBeUploaded).then(res => {\n    if (res && res.data && res.data.status === \"Category Inserted\") {\n      let allCategory = res?.data?.dataFromDatabase?.map(data => {\n        return data;\n      });\n\n      props.updateCategory(allCategory);\n    }\n  });\n}\n\nfunction* generatorFunction() {\n  yield takeLatest(\"all_category\", allcategories);\n  yield takeEvery(\"update_category\", updatecategory(updateCategories.payload));\n}\n\nexport default generatorFunction;\n"]},"metadata":{},"sourceType":"module"}