{"ast":null,"code":"var _jsxFileName = \"/home/com109/Desktop/ad/my-app/src/timeline/timeline.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateCategories, updateLoginState, resetLoginState } from \"../redux/actions\";\nimport fetchData from \"../shared/sharedFunctions\";\nimport { Routes } from \"../shared/config\";\nimport TimelineBodyComponent from \"./timelineBodyComponent\";\nimport socketIOClient from \"socket.io-client\";\nconst {\n  Likes,\n  Category,\n  Upload,\n  AllPosts,\n  UserData,\n  TotalNumberOfPosts\n} = Routes;\nconst zero = 0;\nlet hasMoreItems = true;\nlet totalPosts = \"\";\nlet clicked = false;\nlet username = \"\";\nlet emailId = \"\";\nlet myUploads = false; //let items = zero;\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.categoryUploadForm = () => {\n      if (!clicked) {\n        clicked = true;\n        const form = \"category<input type='text' name='category' required/><br /><br /><input type='submit'/> &emsp;\";\n        document.getElementById(\"category\").innerHTML = form;\n      } else {\n        document.getElementById(\"category\").innerHTML = \"\";\n        clicked = false;\n      }\n    };\n\n    this.DownloadImage = image => {\n      fetch(\"http://localhost:8083/\" + image).then(response => {\n        response.blob().then(blob => {\n          let url = window.URL.createObjectURL(blob);\n          let a = document.createElement(\"a\");\n          a.href = url;\n          a.download = image;\n          a.click();\n        });\n      });\n    };\n\n    this.likePost = postID => {\n      let likedData = {\n        postId: postID,\n        userId: localStorage.getItem(\"userId\")\n      };\n      fetchData(Likes, likedData).then(res => {\n        if (res && res.data) {\n          var _res$data;\n\n          let likeData = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.dataFromDatabase[0];\n\n          for (let i = zero; i < this.state.postdata.length; i++) {\n            if (this.state.postdata[i]._id === likeData._id) {\n              let postData = this.state.postdata;\n              postData[i].likes = likeData.likes;\n              this.setState({\n                postdata: postData\n              });\n            }\n          }\n        }\n      }).catch(err => {\n        this.setState({\n          hasError: true\n        });\n      });\n    };\n\n    this.stateUpdateOnTimelineClick = async () => {\n      this.setState({\n        // myUploads: false,\n        items: zero // hasMoreItems: true\n\n      }); // items = zero;\n\n      myUploads = false;\n      hasMoreItems = true;\n      await this.totalNumberPosts();\n      await this.allPost(this.state.items);\n    };\n\n    this.uploadCategory = event => {\n      event.preventDefault();\n      let newCategory = event.target.category.value;\n      const categoryToBeUploaded = {\n        category: newCategory\n      };\n      fetchData(Category, categoryToBeUploaded).then(res => {\n        if (res && res.data && res.data.status === \"Category Inserted\") {\n          var _res$data2, _res$data2$dataFromDa;\n\n          let allCategory = res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$dataFromDa = _res$data2.dataFromDatabase) === null || _res$data2$dataFromDa === void 0 ? void 0 : _res$data2$dataFromDa.map(data => {\n            return data;\n          });\n          this.props.updateCategory(allCategory);\n        }\n\n        if (res && res.data.status === \"Already Exist\") {\n          alert(\"This category already exist\");\n        }\n      }).catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n      clicked = false;\n      document.getElementById(\"category\").innerHTML = \"\";\n    };\n\n    this.togglePopup = () => {\n      // console.log(\"showPopup\", showPopup);\n      this.setState({\n        showPopup: !this.state.showPopup\n      });\n    };\n\n    this.loadMorePosts = () => {\n      if (this.state.items <= totalPosts) {\n        setTimeout(async () => {\n          await this.allPost(this.state.items);\n        }, 1000);\n      } else {\n        //this.setState({ hasMoreItems: false });\n        hasMoreItems = false;\n      }\n\n      return new Promise(resolve => {\n        resolve(true);\n      });\n    };\n\n    this.allPost = skipPosts => {\n      const post = {\n        Skip: skipPosts,\n        email: myUploads ? emailId : false\n      };\n      fetchData(AllPosts, post).then(res => {\n        if (res) {\n          let allPostsData = res.data.dataFromDatabase;\n\n          if (skipPosts === zero) {\n            this.setState({\n              postdata: allPostsData,\n              items: skipPosts + 5\n            });\n          } else {\n            this.setState({\n              postdata: [...this.state.postdata, ...allPostsData],\n              items: skipPosts + 5\n            });\n          }\n        }\n      }).catch(err => {\n        this.setState({\n          hasError: true\n        });\n      });\n    };\n\n    this.showMyUploads = async () => {\n      this.setState({\n        // myUploads: true,\n        // hasMoreItems: true,\n        items: zero\n      });\n      myUploads = true;\n      hasMoreItems = true;\n      await this.totalNumberPosts();\n      await this.allPost(this.state.items);\n    };\n\n    this.checkNotlogin = () => {\n      if (!localStorage.getItem(\"userId\")) {\n        this.props.history.push(\"/login\");\n      }\n    };\n\n    this.userDetails = () => {\n      let UserID = {\n        id: localStorage.getItem(\"userId\")\n      };\n      fetchData(UserData, UserID).then(res => {\n        username = res.data[zero].username;\n        emailId = res.data[zero].email;\n      });\n    };\n\n    this.totalNumberPosts = () => {\n      const data = {\n        email: myUploads ? emailId : false\n      };\n      fetchData(TotalNumberOfPosts, data).then(res => {\n        if (res) {\n          totalPosts = res.data.counts; // return new Promise(resolve => {\n          //   resolve(true);\n          // });\n        }\n      }).catch(err => {\n        this.setState({\n          hasError: true\n        });\n      });\n    };\n\n    this.state = {\n      showPopup: false,\n      postdata: [],\n      items: zero,\n      response: false,\n      endpoint: \"http://localhost:8083\"\n    };\n    this.handlePostUploadForm = this.handlePostUploadForm.bind(this);\n  }\n\n  handlePostUploadForm(event) {\n    event.preventDefault();\n\n    if (event.target.category.value === \"none\") {\n      document.getElementById(\"category123\").focus();\n    } else {\n      let category = event.target.category.value;\n      let file = event.target.file.files[0];\n      let caption = event.target.description.value;\n      let userName = username;\n      let userEmail = emailId;\n      const formdata = new FormData();\n      formdata.append(\"username\", userName);\n      formdata.append(\"email\", userEmail);\n      formdata.append(\"caption\", caption);\n      formdata.append(\"category\", category);\n      formdata.append(\"file\", file); // Axios.post(Server.ServerUrl + Server.Routes.Upload, formdata);\n\n      fetchData(Upload, formdata).then(res => {\n        if (res && res.data.status === \"Post Inserted\") {\n          this.allPost(zero);\n        } else {\n          alert(\"not inserted\");\n        }\n\n        this.togglePopup();\n      }).catch(err => {\n        this.setState({\n          hasError: true\n        });\n      });\n    }\n  }\n\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true\n    };\n  } // componentWillUnmount() {\n  //   items = zero;\n  // }\n\n\n  componentDidMount() {\n    const {\n      endpoint\n    } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"FromAPI\", data => this.setState({\n      response: data\n    }));\n    this.totalNumberPosts();\n    this.userDetails();\n    this.checkNotlogin();\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n  }\n\n  render() {\n    const {\n      hasError,\n      // hasMoreItems,\n      showPopup,\n      postdata,\n      items // username\n\n    } = this.state;\n\n    if (hasError) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          padding: \"200px 450px\",\n          color: \"#f47b13\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, \"404 | Something went wrong\"));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(\"script\", {\n      src: \"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.dev.js\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(TimelineBodyComponent, {\n      togglePopup: this.togglePopup.bind(this),\n      categoryUploadForm: this.categoryUploadForm,\n      uploadCategory: this.uploadCategory,\n      username: username,\n      showMyUploads: this.showMyUploads,\n      stateUpdateOnTimelineClick: this.stateUpdateOnTimelineClick,\n      handlePostUploadForm: this.handlePostUploadForm,\n      items: items,\n      loadMorePosts: this.loadMorePosts,\n      hasMoreItems: hasMoreItems,\n      postdata: postdata,\n      likePost: this.likePost,\n      showPopup: showPopup,\n      hasError: hasError,\n      downLoad: this.DownloadImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    category: state.CategoryReducer.category\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateCategory: data => dispatch(updateCategories(data)),\n    updateLoginState: data => dispatch(updateLoginState(data)),\n    resetLoginState: () => dispatch(resetLoginState())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timeline);","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/timeline/timeline.js"],"names":["React","connect","updateCategories","updateLoginState","resetLoginState","fetchData","Routes","TimelineBodyComponent","socketIOClient","Likes","Category","Upload","AllPosts","UserData","TotalNumberOfPosts","zero","hasMoreItems","totalPosts","clicked","username","emailId","myUploads","Timeline","Component","constructor","props","categoryUploadForm","form","document","getElementById","innerHTML","DownloadImage","image","fetch","then","response","blob","url","window","URL","createObjectURL","a","createElement","href","download","click","likePost","postID","likedData","postId","userId","localStorage","getItem","res","data","likeData","dataFromDatabase","i","state","postdata","length","_id","postData","likes","setState","catch","err","hasError","stateUpdateOnTimelineClick","items","totalNumberPosts","allPost","uploadCategory","event","preventDefault","newCategory","target","category","value","categoryToBeUploaded","status","allCategory","map","updateCategory","alert","message","history","push","togglePopup","showPopup","loadMorePosts","setTimeout","Promise","resolve","skipPosts","post","Skip","email","allPostsData","showMyUploads","checkNotlogin","userDetails","UserID","id","counts","endpoint","handlePostUploadForm","bind","focus","file","files","caption","description","userName","userEmail","formdata","FormData","append","getDerivedStateFromError","error","componentDidMount","socket","on","render","padding","color","mapStateToProps","CategoryReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport {\n  updateCategories,\n  updateLoginState,\n  resetLoginState\n} from \"../redux/actions\";\nimport fetchData from \"../shared/sharedFunctions\";\nimport { Routes } from \"../shared/config\";\nimport TimelineBodyComponent from \"./timelineBodyComponent\";\nimport socketIOClient from \"socket.io-client\";\n\nconst {\n  Likes,\n  Category,\n  Upload,\n  AllPosts,\n  UserData,\n  TotalNumberOfPosts\n} = Routes;\n\nconst zero = 0;\nlet hasMoreItems = true;\nlet totalPosts = \"\";\nlet clicked = false;\nlet username = \"\";\nlet emailId = \"\";\nlet myUploads = false;\n//let items = zero;\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPopup: false,\n      postdata: [],\n      items: zero,\n      response: false,\n      endpoint: \"http://localhost:8083\"\n    };\n    this.handlePostUploadForm = this.handlePostUploadForm.bind(this);\n  }\n  categoryUploadForm = () => {\n    if (!clicked) {\n      clicked = true;\n      const form =\n        \"category<input type='text' name='category' required/><br /><br /><input type='submit'/> &emsp;\";\n      document.getElementById(\"category\").innerHTML = form;\n    } else {\n      document.getElementById(\"category\").innerHTML = \"\";\n      clicked = false;\n    }\n  };\n\n  DownloadImage = image => {\n    fetch(\"http://localhost:8083/\" + image).then(response => {\n      response.blob().then(blob => {\n        let url = window.URL.createObjectURL(blob);\n        let a = document.createElement(\"a\");\n        a.href = url;\n        a.download = image;\n        a.click();\n      });\n    });\n  };\n  likePost = postID => {\n    let likedData = {\n      postId: postID,\n      userId: localStorage.getItem(\"userId\")\n    };\n    fetchData(Likes, likedData)\n      .then(res => {\n        if (res && res.data) {\n          let likeData = res?.data?.dataFromDatabase[0];\n          for (let i = zero; i < this.state.postdata.length; i++) {\n            if (this.state.postdata[i]._id === likeData._id) {\n              let postData = this.state.postdata;\n              postData[i].likes = likeData.likes;\n              this.setState({ postdata: postData });\n            }\n          }\n        }\n      })\n      .catch(err => {\n        this.setState({ hasError: true });\n      });\n  };\n\n  stateUpdateOnTimelineClick = async () => {\n    this.setState({\n      // myUploads: false,\n      items: zero\n      // hasMoreItems: true\n    });\n    // items = zero;\n    myUploads = false;\n    hasMoreItems = true;\n    await this.totalNumberPosts();\n    await this.allPost(this.state.items);\n  };\n\n  uploadCategory = event => {\n    event.preventDefault();\n    let newCategory = event.target.category.value;\n    const categoryToBeUploaded = { category: newCategory };\n    fetchData(Category, categoryToBeUploaded)\n      .then(res => {\n        if (res && res.data && res.data.status === \"Category Inserted\") {\n          let allCategory = res?.data?.dataFromDatabase?.map(data => {\n            return data;\n          });\n          this.props.updateCategory(allCategory);\n        }\n        if (res && res.data.status === \"Already Exist\") {\n          alert(\"This category already exist\");\n        }\n      })\n      .catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n    clicked = false;\n    document.getElementById(\"category\").innerHTML = \"\";\n  };\n\n  handlePostUploadForm(event) {\n    event.preventDefault();\n    if (event.target.category.value === \"none\") {\n      document.getElementById(\"category123\").focus();\n    } else {\n      let category = event.target.category.value;\n      let file = event.target.file.files[0];\n      let caption = event.target.description.value;\n      let userName = username;\n      let userEmail = emailId;\n      const formdata = new FormData();\n      formdata.append(\"username\", userName);\n      formdata.append(\"email\", userEmail);\n      formdata.append(\"caption\", caption);\n      formdata.append(\"category\", category);\n      formdata.append(\"file\", file);\n      // Axios.post(Server.ServerUrl + Server.Routes.Upload, formdata);\n      fetchData(Upload, formdata)\n        .then(res => {\n          if (res && res.data.status === \"Post Inserted\") {\n            this.allPost(zero);\n          } else {\n            alert(\"not inserted\");\n          }\n          this.togglePopup();\n        })\n        .catch(err => {\n          this.setState({ hasError: true });\n        });\n    }\n  }\n\n  togglePopup = () => {\n    // console.log(\"showPopup\", showPopup);\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  };\n\n  loadMorePosts = () => {\n    if (this.state.items <= totalPosts) {\n      setTimeout(async () => {\n        await this.allPost(this.state.items);\n      }, 1000);\n    } else {\n      //this.setState({ hasMoreItems: false });\n      hasMoreItems = false;\n    }\n    return new Promise(resolve => {\n      resolve(true);\n    });\n  };\n\n  allPost = skipPosts => {\n    const post = {\n      Skip: skipPosts,\n      email: myUploads ? emailId : false\n    };\n    fetchData(AllPosts, post)\n      .then(res => {\n        if (res) {\n          let allPostsData = res.data.dataFromDatabase;\n          if (skipPosts === zero) {\n            this.setState({\n              postdata: allPostsData,\n              items: skipPosts + 5\n            });\n          } else {\n            this.setState({\n              postdata: [...this.state.postdata, ...allPostsData],\n              items: skipPosts + 5\n            });\n          }\n        }\n      })\n      .catch(err => {\n        this.setState({ hasError: true });\n      });\n  };\n\n  showMyUploads = async () => {\n    this.setState({\n      // myUploads: true,\n      // hasMoreItems: true,\n      items: zero\n    });\n    myUploads = true;\n    hasMoreItems = true;\n    await this.totalNumberPosts();\n    await this.allPost(this.state.items);\n  };\n\n  checkNotlogin = () => {\n    if (!localStorage.getItem(\"userId\")) {\n      this.props.history.push(\"/login\");\n    }\n  };\n\n  userDetails = () => {\n    let UserID = { id: localStorage.getItem(\"userId\") };\n    fetchData(UserData, UserID).then(res => {\n      username = res.data[zero].username;\n      emailId = res.data[zero].email;\n    });\n  };\n\n  totalNumberPosts = () => {\n    const data = { email: myUploads ? emailId : false };\n    fetchData(TotalNumberOfPosts, data)\n      .then(res => {\n        if (res) {\n          totalPosts = res.data.counts;\n          // return new Promise(resolve => {\n          //   resolve(true);\n          // });\n        }\n      })\n      .catch(err => {\n        this.setState({ hasError: true });\n      });\n  };\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  // componentWillUnmount() {\n  //   items = zero;\n  // }\n\n  componentDidMount() {\n    const { endpoint } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"FromAPI\", data => this.setState({ response: data }));\n    this.totalNumberPosts();\n    this.userDetails();\n    this.checkNotlogin();\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n  }\n\n  render() {\n    const {\n      hasError,\n      // hasMoreItems,\n      showPopup,\n      postdata,\n      items\n      // username\n    } = this.state;\n    if (hasError) {\n      return (\n        <div>\n          <h1 style={{ padding: \"200px 450px\", color: \"#f47b13\" }}>\n            404 | Something went wrong\n          </h1>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.dev.js\"></script>\n        <TimelineBodyComponent\n          togglePopup={this.togglePopup.bind(this)}\n          categoryUploadForm={this.categoryUploadForm}\n          uploadCategory={this.uploadCategory}\n          username={username}\n          showMyUploads={this.showMyUploads}\n          stateUpdateOnTimelineClick={this.stateUpdateOnTimelineClick}\n          handlePostUploadForm={this.handlePostUploadForm}\n          items={items}\n          loadMorePosts={this.loadMorePosts}\n          hasMoreItems={hasMoreItems}\n          postdata={postdata}\n          likePost={this.likePost}\n          showPopup={showPopup}\n          hasError={hasError}\n          downLoad={this.DownloadImage}\n        />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { category: state.CategoryReducer.category };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateCategory: data => dispatch(updateCategories(data)),\n    updateLoginState: data => dispatch(updateLoginState(data)),\n    resetLoginState: () => dispatch(resetLoginState())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timeline);\n"]},"metadata":{},"sourceType":"module"}