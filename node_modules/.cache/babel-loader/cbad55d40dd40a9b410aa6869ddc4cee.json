{"ast":null,"code":"import { takeEvery, all, put, call, takeLatest } from \"redux-saga/effects\";\nimport { updateCategories } from \"../redux/actions\";\nimport serverCall from \"../utilsFolder/utils\";\nimport { Routes } from \"../config\";\nconst {\n  AllCategory,\n  Upload_Category\n} = Routes;\nexport const all_categories = () => {\n  return {\n    type: \"all_category\"\n  };\n};\nexport const updatecategories = data => {\n  return {\n    type: \"update_category\",\n    payload: data\n  };\n};\n\nfunction* allcategories() {\n  let data = yield call(() => {\n    return serverCall(AllCategory).then(res => {\n      if (res) {\n        var _res$data, _res$data$dataFromDat;\n\n        return (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$dataFromDat = _res$data.dataFromDatabase) === null || _res$data$dataFromDat === void 0 ? void 0 : _res$data$dataFromDat.map(category => {\n          return category;\n        });\n      }\n    });\n  });\n  yield put(updateCategories(data));\n}\n\nfunction* updatecategory(data) {\n  const categoryToBeUploaded = {\n    category: data\n  };\n  let updatedData = yield call(() => {\n    return serverCall(Upload_Category, categoryToBeUploaded).then(res => {\n      var _res$data2, _res$data2$dataFromDa;\n\n      return res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : (_res$data2$dataFromDa = _res$data2.dataFromDatabase) === null || _res$data2$dataFromDa === void 0 ? void 0 : _res$data2$dataFromDa.map(data => {\n        return data;\n      });\n    });\n  });\n  yield put(updateCategories(updatedData));\n}\n\nfunction* generatorFunction() {\n  yield takeLatest(\"all_category\", allcategories);\n  yield takeEvery(\"update_category\", updatecategory(updateCategories.payload));\n}\n\nexport default generatorFunction;","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/redux/saga.js"],"names":["takeEvery","all","put","call","takeLatest","updateCategories","serverCall","Routes","AllCategory","Upload_Category","all_categories","type","updatecategories","data","payload","allcategories","then","res","dataFromDatabase","map","category","updatecategory","categoryToBeUploaded","updatedData","generatorFunction"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,UAApC,QAAsD,oBAAtD;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,MAAT,QAAuB,WAAvB;AAEA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAAmCF,MAAzC;AAEA,OAAO,MAAMG,cAAc,GAAG,MAAM;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMC,gBAAgB,GAAGC,IAAI,IAAI;AACtC,SAAO;AACLF,IAAAA,IAAI,EAAE,iBADD;AAELG,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID,CALM;;AAOP,UAAUE,aAAV,GAA0B;AACxB,MAAIF,IAAI,GAAG,MAAMV,IAAI,CAAC,MAAM;AAC1B,WAAOG,UAAU,CAACE,WAAD,CAAV,CAAwBQ,IAAxB,CAA6BC,GAAG,IAAI;AACzC,UAAIA,GAAJ,EAAS;AAAA;;AACP,4BAAOA,GAAG,CAACJ,IAAX,uEAAO,UAAUK,gBAAjB,0DAAO,sBAA4BC,GAA5B,CAAgCC,QAAQ,IAAI;AACjD,iBAAOA,QAAP;AACD,SAFM,CAAP;AAGD;AACF,KANM,CAAP;AAOD,GARoB,CAArB;AASA,QAAMlB,GAAG,CAACG,gBAAgB,CAACQ,IAAD,CAAjB,CAAT;AACD;;AAED,UAAUQ,cAAV,CAAyBR,IAAzB,EAA+B;AAC7B,QAAMS,oBAAoB,GAAG;AAAEF,IAAAA,QAAQ,EAAEP;AAAZ,GAA7B;AACA,MAAIU,WAAW,GAAG,MAAMpB,IAAI,CAAC,MAAM;AACjC,WAAOG,UAAU,CAACG,eAAD,EAAkBa,oBAAlB,CAAV,CAAkDN,IAAlD,CAAuDC,GAAG,IAAI;AAAA;;AACnE,aAAOA,GAAP,aAAOA,GAAP,qCAAOA,GAAG,CAAEJ,IAAZ,wEAAO,WAAWK,gBAAlB,0DAAO,sBAA6BC,GAA7B,CAAiCN,IAAI,IAAI;AAC9C,eAAOA,IAAP;AACD,OAFM,CAAP;AAGD,KAJM,CAAP;AAKD,GAN2B,CAA5B;AAOA,QAAMX,GAAG,CAACG,gBAAgB,CAACkB,WAAD,CAAjB,CAAT;AACD;;AAED,UAAUC,iBAAV,GAA8B;AAC5B,QAAMpB,UAAU,CAAC,cAAD,EAAiBW,aAAjB,CAAhB;AACA,QAAMf,SAAS,CAAC,iBAAD,EAAoBqB,cAAc,CAAChB,gBAAgB,CAACS,OAAlB,CAAlC,CAAf;AACD;;AAED,eAAeU,iBAAf","sourcesContent":["import { takeEvery, all, put, call, takeLatest } from \"redux-saga/effects\";\nimport { updateCategories } from \"../redux/actions\";\nimport serverCall from \"../utilsFolder/utils\";\nimport { Routes } from \"../config\";\n\nconst { AllCategory, Upload_Category } = Routes;\n\nexport const all_categories = () => {\n  return {\n    type: \"all_category\"\n  };\n};\n\nexport const updatecategories = data => {\n  return {\n    type: \"update_category\",\n    payload: data\n  };\n};\n\nfunction* allcategories() {\n  let data = yield call(() => {\n    return serverCall(AllCategory).then(res => {\n      if (res) {\n        return res.data?.dataFromDatabase?.map(category => {\n          return category;\n        });\n      }\n    });\n  });\n  yield put(updateCategories(data));\n}\n\nfunction* updatecategory(data) {\n  const categoryToBeUploaded = { category: data };\n  let updatedData = yield call(() => {\n    return serverCall(Upload_Category, categoryToBeUploaded).then(res => {\n      return res?.data?.dataFromDatabase?.map(data => {\n        return data;\n      });\n    });\n  });\n  yield put(updateCategories(updatedData));\n}\n\nfunction* generatorFunction() {\n  yield takeLatest(\"all_category\", allcategories);\n  yield takeEvery(\"update_category\", updatecategory(updateCategories.payload));\n}\n\nexport default generatorFunction;\n"]},"metadata":{},"sourceType":"module"}