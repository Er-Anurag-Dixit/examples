{"ast":null,"code":"var _jsxFileName = \"/home/com109/Desktop/ad/my-app/src/timeline/timeline.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport socketIOClient from \"socket.io-client\";\nimport { updateLoginState, updateCategories, resetLoginState } from \"../redux/actions\";\nimport fetchData from \"../shared/sharedFunctions\";\nimport { Routes, ServerUrl } from \"../shared/config\";\nimport TimelineBodyComponent from \"./timelineBodyComponent\";\nconst {\n  Likes,\n  Category,\n  Upload,\n  AllPosts,\n  UserData,\n  TotalNumberOfPosts\n} = Routes;\nconst zero = 0;\nlet hasMoreItems = true;\nlet totalPosts = \"\";\nlet clicked = false;\nlet username = \"\";\nlet emailId = \"\";\nlet myUploads = false;\nlet postdata = [];\nlet endpoint = ServerUrl;\nlet hasError = false;\n\nconst categoryUploadForm = function () {\n  if (!clicked) {\n    clicked = true;\n    const form = \"category<input type='text' name='category' required/><br /><br /><input type='submit'/> &emsp;\";\n    document.getElementById(\"category\").innerHTML = form;\n  } else {\n    document.getElementById(\"category\").innerHTML = \"\";\n    clicked = false;\n  }\n};\n\nconst userDetails = function () {\n  let UserID = {\n    id: localStorage.getItem(\"userId\")\n  };\n  fetchData(UserData, UserID).then(res => {\n    var _res$data$zero, _res$data$zero2;\n\n    if (res && res.data) username = (_res$data$zero = res.data[zero]) === null || _res$data$zero === void 0 ? void 0 : _res$data$zero.username;\n    emailId = (_res$data$zero2 = res.data[zero]) === null || _res$data$zero2 === void 0 ? void 0 : _res$data$zero2.email;\n  }).catch(err => {\n    if (err.message === \"Network Error\") {\n      this.props.history.push(\"/errorpage\");\n    }\n  });\n};\n\nconst DownloadImage = function (image) {\n  fetch(ServerUrl + \"/\" + image).then(response => {\n    response.blob().then(blob => {\n      let url = window.URL.createObjectURL(blob);\n      let a = document.createElement(\"a\");\n      a.href = url;\n      a.download = image;\n      a.click();\n    });\n  });\n};\n\nconst totalNumberPosts = function () {\n  const data = {\n    email: myUploads ? emailId : null\n  };\n  fetchData(TotalNumberOfPosts, data).then(res => {\n    if (res) {\n      var _res$data;\n\n      totalPosts = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.counts;\n    }\n  }).catch(err => {\n    if (err.message === \"Network Error\") {\n      this.props.history.push(\"/errorpage\");\n    }\n  });\n};\n\nconst likePost = function (postID) {\n  let likedData = {\n    postId: postID,\n    userId: localStorage.getItem(\"userId\")\n  };\n  fetchData(Likes, likedData).then(res => {\n    if (res === null || res === void 0 ? void 0 : res.data) {\n      var _res$data2;\n\n      let likeData = res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.dataFromDatabase[0];\n\n      for (let i = zero; i < postdata.length; i++) {\n        if (postdata[i]._id === likeData._id) {\n          let newpostData = postdata;\n          newpostData[i].likes = likeData.likes;\n          postdata = newpostData;\n        }\n      }\n    }\n  }).catch(err => {\n    if (err.message === \"Network Error\") {\n      this.props.history.push(\"/errorpage\");\n    }\n  });\n};\n\nconst setupSocket = function () {\n  const socket = socketIOClient(endpoint);\n  socket.on(\"FromAPI\", data => this.response = data);\n};\n\nconst checkIfNotlogin = function () {\n  if (!localStorage.getItem(\"userId\")) {\n    this.props.history.push(\"/login\");\n  }\n};\n\nconst uploadCategory = function (event) {\n  event.preventDefault();\n  let newCategory = event.target.category.value;\n  const categoryToBeUploaded = {\n    category: newCategory\n  };\n  fetchData(Category, categoryToBeUploaded).then(res => {\n    var _res$data4;\n\n    if (res && res.data && res.data.status === \"Category Inserted\") {\n      var _res$data3, _res$data3$dataFromDa;\n\n      let allCategory = res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$dataFromDa = _res$data3.dataFromDatabase) === null || _res$data3$dataFromDa === void 0 ? void 0 : _res$data3$dataFromDa.map(data => {\n        return data;\n      });\n      this.props.updateCategory(allCategory);\n    }\n\n    if (res && ((_res$data4 = res.data) === null || _res$data4 === void 0 ? void 0 : _res$data4.status) === \"Already Exist\") {\n      alert(\"This category already exist\");\n    }\n  }).catch(err => {\n    if (err.message === \"Network Error\") {\n      this.props.history.push(\"/errorpage\");\n    }\n  });\n  clicked = false;\n  document.getElementById(\"category\").innerHTML = \"\";\n};\n\nconst handlePostUploadForm = function (event) {\n  var _event$target, _event$target$categor;\n\n  event.preventDefault();\n\n  if ((event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : (_event$target$categor = _event$target.category) === null || _event$target$categor === void 0 ? void 0 : _event$target$categor.value) === \"none\") {\n    document.getElementById(\"category123\").focus();\n  } else {\n    let category = event.target.category.value;\n    let file = event.target.file.files[0];\n    let caption = event.target.description.value;\n    let userName = username;\n    let userEmail = emailId;\n    const formdata = new FormData();\n    formdata.append(\"username\", userName);\n    formdata.append(\"email\", userEmail);\n    formdata.append(\"caption\", caption);\n    formdata.append(\"category\", category);\n    formdata.append(\"file\", file);\n    fetchData(Upload, formdata).then(res => {\n      var _res$data5;\n\n      if (res && ((_res$data5 = res.data) === null || _res$data5 === void 0 ? void 0 : _res$data5.status) === \"Post Inserted\") {\n        this.allPost(zero);\n      } else {\n        alert(\"not inserted\");\n      }\n\n      this.togglePopup();\n    }).catch(err => {\n      hasError = true;\n    });\n  }\n};\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.stateUpdateOnTimelineClick = async () => {\n      this.setState({\n        items: zero\n      });\n      myUploads = false;\n      hasMoreItems = true;\n      await this.totalNumberPosts();\n      await this.allPost(this.state.items);\n    };\n\n    this.togglePopup = () => {\n      this.setState({\n        showPopup: !this.state.showPopup\n      });\n    };\n\n    this.loadMorePosts = () => {\n      if (this.state.items <= totalPosts) {\n        setTimeout(async () => {\n          await this.allPost(this.state.items);\n        }, 1000);\n      } else {\n        hasMoreItems = false;\n      }\n\n      return new Promise(resolve => {\n        resolve(true);\n      });\n    };\n\n    this.allPost = skipPosts => {\n      const post = {\n        Skip: skipPosts,\n        email: myUploads ? emailId : false\n      };\n      fetchData(AllPosts, post).then(res => {\n        if (res) {\n          var _res$data6;\n\n          let allPostsData = (_res$data6 = res.data) === null || _res$data6 === void 0 ? void 0 : _res$data6.dataFromDatabase;\n\n          if (skipPosts === zero) {\n            postdata = allPostsData;\n            this.setState({\n              items: skipPosts + 5\n            });\n          } else {\n            postdata = [...postdata, ...allPostsData];\n            this.setState({\n              items: skipPosts + 5\n            });\n          }\n        }\n      }).catch(err => {\n        hasError = true;\n      });\n    };\n\n    this.showMyUploads = async () => {\n      this.setState({\n        items: zero\n      });\n      myUploads = true;\n      hasMoreItems = true;\n      await this.totalNumberPosts();\n      await this.allPost(this.state.items);\n    };\n\n    this.response = false;\n    this.state = {\n      showPopup: false,\n      items: zero\n    };\n    this.handlePostUploadForm = handlePostUploadForm.bind(this);\n    this.userDetails = userDetails.bind(this);\n    this.DownloadImage = DownloadImage.bind(this);\n    this.categoryUploadForm = categoryUploadForm.bind(this);\n    this.totalNumberPosts = totalNumberPosts.bind(this);\n    this.likePost = likePost.bind(this);\n    this.setupSocket = setupSocket.bind(this);\n    this.checkIfNotlogin = checkIfNotlogin.bind(this);\n    this.uploadCategory = uploadCategory.bind(this);\n    this.handlePostUploadForm = handlePostUploadForm.bind(this);\n  }\n\n  static getDerivedStateFromError(error) {\n    return hasError = true;\n  }\n\n  componentDidMount() {\n    this.checkIfNotlogin();\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n    this.setupSocket();\n    this.totalNumberPosts();\n    this.userDetails();\n  }\n\n  render() {\n    const {\n      showPopup,\n      items\n    } = this.state;\n\n    if (hasError) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          padding: \"200px 450px\",\n          color: \"#f47b13\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, \"404 | Something went wrong\"));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, React.createElement(TimelineBodyComponent, {\n        togglePopup: this.togglePopup.bind(this),\n        categoryUploadForm: this.categoryUploadForm,\n        uploadCategory: this.uploadCategory,\n        username: username,\n        showMyUploads: this.showMyUploads,\n        stateUpdateOnTimelineClick: this.stateUpdateOnTimelineClick,\n        handlePostUploadForm: this.handlePostUploadForm,\n        items: items,\n        loadMorePosts: this.loadMorePosts,\n        hasMoreItems: hasMoreItems,\n        postdata: postdata,\n        likePost: this.likePost,\n        showPopup: showPopup,\n        hasError: hasError,\n        downLoad: this.DownloadImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    category: state.CategoryReducer.category\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data)),\n    updateCategory: data => dispatch(updateCategories(data)),\n    resetLoginState: () => dispatch(resetLoginState())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timeline);","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/timeline/timeline.js"],"names":["React","connect","socketIOClient","updateLoginState","updateCategories","resetLoginState","fetchData","Routes","ServerUrl","TimelineBodyComponent","Likes","Category","Upload","AllPosts","UserData","TotalNumberOfPosts","zero","hasMoreItems","totalPosts","clicked","username","emailId","myUploads","postdata","endpoint","hasError","categoryUploadForm","form","document","getElementById","innerHTML","userDetails","UserID","id","localStorage","getItem","then","res","data","email","catch","err","message","props","history","push","DownloadImage","image","fetch","response","blob","url","window","URL","createObjectURL","a","createElement","href","download","click","totalNumberPosts","counts","likePost","postID","likedData","postId","userId","likeData","dataFromDatabase","i","length","_id","newpostData","likes","setupSocket","socket","on","checkIfNotlogin","uploadCategory","event","preventDefault","newCategory","target","category","value","categoryToBeUploaded","status","allCategory","map","updateCategory","alert","handlePostUploadForm","focus","file","files","caption","description","userName","userEmail","formdata","FormData","append","allPost","togglePopup","Timeline","Component","constructor","stateUpdateOnTimelineClick","setState","items","state","showPopup","loadMorePosts","setTimeout","Promise","resolve","skipPosts","post","Skip","allPostsData","showMyUploads","bind","getDerivedStateFromError","error","componentDidMount","render","padding","color","mapStateToProps","CategoryReducer","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,eAHF,QAIO,kBAJP;AAKA,OAAOC,SAAP,MAAsB,2BAAtB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,kBAAlC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AAEA,MAAM;AACJC,EAAAA,KADI;AAEJC,EAAAA,QAFI;AAGJC,EAAAA,MAHI;AAIJC,EAAAA,QAJI;AAKJC,EAAAA,QALI;AAMJC,EAAAA;AANI,IAOFR,MAPJ;AASA,MAAMS,IAAI,GAAG,CAAb;AACA,IAAIC,YAAY,GAAG,IAAnB;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,OAAO,GAAG,KAAd;AACA,IAAIC,QAAQ,GAAG,EAAf;AACA,IAAIC,OAAO,GAAG,EAAd;AACA,IAAIC,SAAS,GAAG,KAAhB;AACA,IAAIC,QAAQ,GAAG,EAAf;AACA,IAAIC,QAAQ,GAAGhB,SAAf;AACA,IAAIiB,QAAQ,GAAG,KAAf;;AAEA,MAAMC,kBAAkB,GAAG,YAAW;AACpC,MAAI,CAACP,OAAL,EAAc;AACZA,IAAAA,OAAO,GAAG,IAAV;AACA,UAAMQ,IAAI,GACR,gGADF;AAEAC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,SAApC,GAAgDH,IAAhD;AACD,GALD,MAKO;AACLC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,SAApC,GAAgD,EAAhD;AACAX,IAAAA,OAAO,GAAG,KAAV;AACD;AACF,CAVD;;AAYA,MAAMY,WAAW,GAAG,YAAW;AAC7B,MAAIC,MAAM,GAAG;AAAEC,IAAAA,EAAE,EAAEC,YAAY,CAACC,OAAb,CAAqB,QAArB;AAAN,GAAb;AACA7B,EAAAA,SAAS,CAACQ,QAAD,EAAWkB,MAAX,CAAT,CACGI,IADH,CACQC,GAAG,IAAI;AAAA;;AACX,QAAIA,GAAG,IAAIA,GAAG,CAACC,IAAf,EAAqBlB,QAAQ,qBAAGiB,GAAG,CAACC,IAAJ,CAAStB,IAAT,CAAH,mDAAG,eAAgBI,QAA3B;AACrBC,IAAAA,OAAO,sBAAGgB,GAAG,CAACC,IAAJ,CAAStB,IAAT,CAAH,oDAAG,gBAAgBuB,KAA1B;AACD,GAJH,EAKGC,KALH,CAKSC,GAAG,IAAI;AACZ,QAAIA,GAAG,CAACC,OAAJ,KAAgB,eAApB,EAAqC;AACnC,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB;AACD;AACF,GATH;AAUD,CAZD;;AAaA,MAAMC,aAAa,GAAG,UAASC,KAAT,EAAgB;AACpCC,EAAAA,KAAK,CAACxC,SAAS,GAAG,GAAZ,GAAkBuC,KAAnB,CAAL,CAA+BX,IAA/B,CAAoCa,QAAQ,IAAI;AAC9CA,IAAAA,QAAQ,CAACC,IAAT,GAAgBd,IAAhB,CAAqBc,IAAI,IAAI;AAC3B,UAAIC,GAAG,GAAGC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BJ,IAA3B,CAAV;AACA,UAAIK,CAAC,GAAG3B,QAAQ,CAAC4B,aAAT,CAAuB,GAAvB,CAAR;AACAD,MAAAA,CAAC,CAACE,IAAF,GAASN,GAAT;AACAI,MAAAA,CAAC,CAACG,QAAF,GAAaX,KAAb;AACAQ,MAAAA,CAAC,CAACI,KAAF;AACD,KAND;AAOD,GARD;AASD,CAVD;;AAYA,MAAMC,gBAAgB,GAAG,YAAW;AAClC,QAAMtB,IAAI,GAAG;AAAEC,IAAAA,KAAK,EAAEjB,SAAS,GAAGD,OAAH,GAAa;AAA/B,GAAb;AACAf,EAAAA,SAAS,CAACS,kBAAD,EAAqBuB,IAArB,CAAT,CACGF,IADH,CACQC,GAAG,IAAI;AACX,QAAIA,GAAJ,EAAS;AAAA;;AACPnB,MAAAA,UAAU,gBAAGmB,GAAG,CAACC,IAAP,8CAAG,UAAUuB,MAAvB;AACD;AACF,GALH,EAMGrB,KANH,CAMSC,GAAG,IAAI;AACZ,QAAIA,GAAG,CAACC,OAAJ,KAAgB,eAApB,EAAqC;AACnC,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB;AACD;AACF,GAVH;AAWD,CAbD;;AAeA,MAAMiB,QAAQ,GAAG,UAASC,MAAT,EAAiB;AAChC,MAAIC,SAAS,GAAG;AACdC,IAAAA,MAAM,EAAEF,MADM;AAEdG,IAAAA,MAAM,EAAEhC,YAAY,CAACC,OAAb,CAAqB,QAArB;AAFM,GAAhB;AAIA7B,EAAAA,SAAS,CAACI,KAAD,EAAQsD,SAAR,CAAT,CACG5B,IADH,CACQC,GAAG,IAAI;AACX,QAAIA,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAEC,IAAT,EAAe;AAAA;;AACb,UAAI6B,QAAQ,GAAG9B,GAAH,aAAGA,GAAH,qCAAGA,GAAG,CAAEC,IAAR,+CAAG,WAAW8B,gBAAX,CAA4B,CAA5B,CAAf;;AACA,WAAK,IAAIC,CAAC,GAAGrD,IAAb,EAAmBqD,CAAC,GAAG9C,QAAQ,CAAC+C,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,YAAI9C,QAAQ,CAAC8C,CAAD,CAAR,CAAYE,GAAZ,KAAoBJ,QAAQ,CAACI,GAAjC,EAAsC;AACpC,cAAIC,WAAW,GAAGjD,QAAlB;AACAiD,UAAAA,WAAW,CAACH,CAAD,CAAX,CAAeI,KAAf,GAAuBN,QAAQ,CAACM,KAAhC;AACAlD,UAAAA,QAAQ,GAAGiD,WAAX;AACD;AACF;AACF;AACF,GAZH,EAaGhC,KAbH,CAaSC,GAAG,IAAI;AACZ,QAAIA,GAAG,CAACC,OAAJ,KAAgB,eAApB,EAAqC;AACnC,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB;AACD;AACF,GAjBH;AAkBD,CAvBD;;AAyBA,MAAM6B,WAAW,GAAG,YAAW;AAC7B,QAAMC,MAAM,GAAGzE,cAAc,CAACsB,QAAD,CAA7B;AACAmD,EAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAqBtC,IAAI,IAAK,KAAKW,QAAL,GAAgBX,IAA9C;AACD,CAHD;;AAKA,MAAMuC,eAAe,GAAG,YAAW;AACjC,MAAI,CAAC3C,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAL,EAAqC;AACnC,SAAKQ,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACD;AACF,CAJD;;AAMA,MAAMiC,cAAc,GAAG,UAASC,KAAT,EAAgB;AACrCA,EAAAA,KAAK,CAACC,cAAN;AACA,MAAIC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAaC,QAAb,CAAsBC,KAAxC;AACA,QAAMC,oBAAoB,GAAG;AAAEF,IAAAA,QAAQ,EAAEF;AAAZ,GAA7B;AACA3E,EAAAA,SAAS,CAACK,QAAD,EAAW0E,oBAAX,CAAT,CACGjD,IADH,CACQC,GAAG,IAAI;AAAA;;AACX,QAAIA,GAAG,IAAIA,GAAG,CAACC,IAAX,IAAmBD,GAAG,CAACC,IAAJ,CAASgD,MAAT,KAAoB,mBAA3C,EAAgE;AAAA;;AAC9D,UAAIC,WAAW,GAAGlD,GAAH,aAAGA,GAAH,qCAAGA,GAAG,CAAEC,IAAR,wEAAG,WAAW8B,gBAAd,0DAAG,sBAA6BoB,GAA7B,CAAiClD,IAAI,IAAI;AACzD,eAAOA,IAAP;AACD,OAFiB,CAAlB;AAGA,WAAKK,KAAL,CAAW8C,cAAX,CAA0BF,WAA1B;AACD;;AACD,QAAIlD,GAAG,IAAI,eAAAA,GAAG,CAACC,IAAJ,0DAAUgD,MAAV,MAAqB,eAAhC,EAAiD;AAC/CI,MAAAA,KAAK,CAAC,6BAAD,CAAL;AACD;AACF,GAXH,EAYGlD,KAZH,CAYSC,GAAG,IAAI;AACZ,QAAIA,GAAG,CAACC,OAAJ,KAAgB,eAApB,EAAqC;AACnC,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,YAAxB;AACD;AACF,GAhBH;AAiBA1B,EAAAA,OAAO,GAAG,KAAV;AACAS,EAAAA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,SAApC,GAAgD,EAAhD;AACD,CAvBD;;AAyBA,MAAM6D,oBAAoB,GAAG,UAASZ,KAAT,EAAgB;AAAA;;AAC3CA,EAAAA,KAAK,CAACC,cAAN;;AACA,MAAI,CAAAD,KAAK,SAAL,IAAAA,KAAK,WAAL,6BAAAA,KAAK,CAAEG,MAAP,yFAAeC,QAAf,gFAAyBC,KAAzB,MAAmC,MAAvC,EAA+C;AAC7CxD,IAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuC+D,KAAvC;AACD,GAFD,MAEO;AACL,QAAIT,QAAQ,GAAGJ,KAAK,CAACG,MAAN,CAAaC,QAAb,CAAsBC,KAArC;AACA,QAAIS,IAAI,GAAGd,KAAK,CAACG,MAAN,CAAaW,IAAb,CAAkBC,KAAlB,CAAwB,CAAxB,CAAX;AACA,QAAIC,OAAO,GAAGhB,KAAK,CAACG,MAAN,CAAac,WAAb,CAAyBZ,KAAvC;AACA,QAAIa,QAAQ,GAAG7E,QAAf;AACA,QAAI8E,SAAS,GAAG7E,OAAhB;AACA,UAAM8E,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BJ,QAA5B;AACAE,IAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBH,SAAzB;AACAC,IAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2BN,OAA3B;AACAI,IAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BlB,QAA5B;AACAgB,IAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBR,IAAxB;AACAvF,IAAAA,SAAS,CAACM,MAAD,EAASuF,QAAT,CAAT,CACG/D,IADH,CACQC,GAAG,IAAI;AAAA;;AACX,UAAIA,GAAG,IAAI,eAAAA,GAAG,CAACC,IAAJ,0DAAUgD,MAAV,MAAqB,eAAhC,EAAiD;AAC/C,aAAKgB,OAAL,CAAatF,IAAb;AACD,OAFD,MAEO;AACL0E,QAAAA,KAAK,CAAC,cAAD,CAAL;AACD;;AACD,WAAKa,WAAL;AACD,KARH,EASG/D,KATH,CASSC,GAAG,IAAI;AACZhB,MAAAA,QAAQ,GAAG,IAAX;AACD,KAXH;AAYD;AACF,CA7BD;;AA8BA,MAAM+E,QAAN,SAAuBxG,KAAK,CAACyG,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAAC/D,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA+BnBgE,0BA/BmB,GA+BU,YAAY;AACvC,WAAKC,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAE7F;AAAT,OAAd;AACAM,MAAAA,SAAS,GAAG,KAAZ;AACAL,MAAAA,YAAY,GAAG,IAAf;AACA,YAAM,KAAK2C,gBAAL,EAAN;AACA,YAAM,KAAK0C,OAAL,CAAa,KAAKQ,KAAL,CAAWD,KAAxB,CAAN;AACD,KArCkB;;AAAA,SAuCnBN,WAvCmB,GAuCL,MAAM;AAClB,WAAKK,QAAL,CAAc;AAAEG,QAAAA,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC;AAAzB,OAAd;AACD,KAzCkB;;AAAA,SA2CnBC,aA3CmB,GA2CH,MAAM;AACpB,UAAI,KAAKF,KAAL,CAAWD,KAAX,IAAoB3F,UAAxB,EAAoC;AAClC+F,QAAAA,UAAU,CAAC,YAAY;AACrB,gBAAM,KAAKX,OAAL,CAAa,KAAKQ,KAAL,CAAWD,KAAxB,CAAN;AACD,SAFS,EAEP,IAFO,CAAV;AAGD,OAJD,MAIO;AACL5F,QAAAA,YAAY,GAAG,KAAf;AACD;;AACD,aAAO,IAAIiG,OAAJ,CAAYC,OAAO,IAAI;AAC5BA,QAAAA,OAAO,CAAC,IAAD,CAAP;AACD,OAFM,CAAP;AAGD,KAtDkB;;AAAA,SAwDnBb,OAxDmB,GAwDTc,SAAS,IAAI;AACrB,YAAMC,IAAI,GAAG;AACXC,QAAAA,IAAI,EAAEF,SADK;AAEX7E,QAAAA,KAAK,EAAEjB,SAAS,GAAGD,OAAH,GAAa;AAFlB,OAAb;AAIAf,MAAAA,SAAS,CAACO,QAAD,EAAWwG,IAAX,CAAT,CACGjF,IADH,CACQC,GAAG,IAAI;AACX,YAAIA,GAAJ,EAAS;AAAA;;AACP,cAAIkF,YAAY,iBAAGlF,GAAG,CAACC,IAAP,+CAAG,WAAU8B,gBAA7B;;AACA,cAAIgD,SAAS,KAAKpG,IAAlB,EAAwB;AACtBO,YAAAA,QAAQ,GAAGgG,YAAX;AACA,iBAAKX,QAAL,CAAc;AAAEC,cAAAA,KAAK,EAAEO,SAAS,GAAG;AAArB,aAAd;AACD,WAHD,MAGO;AACL7F,YAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,EAAc,GAAGgG,YAAjB,CAAX;AACA,iBAAKX,QAAL,CAAc;AAAEC,cAAAA,KAAK,EAAEO,SAAS,GAAG;AAArB,aAAd;AACD;AACF;AACF,OAZH,EAaG5E,KAbH,CAaSC,GAAG,IAAI;AACZhB,QAAAA,QAAQ,GAAG,IAAX;AACD,OAfH;AAgBD,KA7EkB;;AAAA,SA+EnB+F,aA/EmB,GA+EH,YAAY;AAC1B,WAAKZ,QAAL,CAAc;AAAEC,QAAAA,KAAK,EAAE7F;AAAT,OAAd;AACAM,MAAAA,SAAS,GAAG,IAAZ;AACAL,MAAAA,YAAY,GAAG,IAAf;AACA,YAAM,KAAK2C,gBAAL,EAAN;AACA,YAAM,KAAK0C,OAAL,CAAa,KAAKQ,KAAL,CAAWD,KAAxB,CAAN;AACD,KArFkB;;AAEjB,SAAK5D,QAAL,GAAgB,KAAhB;AACA,SAAK6D,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,KADA;AAEXF,MAAAA,KAAK,EAAE7F;AAFI,KAAb;AAIA,SAAK2E,oBAAL,GAA4BA,oBAAoB,CAAC8B,IAArB,CAA0B,IAA1B,CAA5B;AACA,SAAK1F,WAAL,GAAmBA,WAAW,CAAC0F,IAAZ,CAAiB,IAAjB,CAAnB;AACA,SAAK3E,aAAL,GAAqBA,aAAa,CAAC2E,IAAd,CAAmB,IAAnB,CAArB;AACA,SAAK/F,kBAAL,GAA0BA,kBAAkB,CAAC+F,IAAnB,CAAwB,IAAxB,CAA1B;AACA,SAAK7D,gBAAL,GAAwBA,gBAAgB,CAAC6D,IAAjB,CAAsB,IAAtB,CAAxB;AACA,SAAK3D,QAAL,GAAgBA,QAAQ,CAAC2D,IAAT,CAAc,IAAd,CAAhB;AACA,SAAK/C,WAAL,GAAmBA,WAAW,CAAC+C,IAAZ,CAAiB,IAAjB,CAAnB;AACA,SAAK5C,eAAL,GAAuBA,eAAe,CAAC4C,IAAhB,CAAqB,IAArB,CAAvB;AACA,SAAK3C,cAAL,GAAsBA,cAAc,CAAC2C,IAAf,CAAoB,IAApB,CAAtB;AACA,SAAK9B,oBAAL,GAA4BA,oBAAoB,CAAC8B,IAArB,CAA0B,IAA1B,CAA5B;AACD;;AAED,SAAOC,wBAAP,CAAgCC,KAAhC,EAAuC;AACrC,WAAQlG,QAAQ,GAAG,IAAnB;AACD;;AAEDmG,EAAAA,iBAAiB,GAAG;AAClB,SAAK/C,eAAL;AACA,SAAKlC,KAAL,CAAWxC,gBAAX,CAA4B+B,YAAY,CAACC,OAAb,CAAqB,QAArB,CAA5B;AACA,SAAKuC,WAAL;AACA,SAAKd,gBAAL;AACA,SAAK7B,WAAL;AACD;;AA0DD8F,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEd,MAAAA,SAAF;AAAaF,MAAAA;AAAb,QAAuB,KAAKC,KAAlC;;AACA,QAAIrF,QAAJ,EAAc;AACZ,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,KAAK,EAAE;AAAEqG,UAAAA,OAAO,EAAE,aAAX;AAA0BC,UAAAA,KAAK,EAAE;AAAjC,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,CADF;AAOD,KARD,MAQO;AACL,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,qBAAD;AACE,QAAA,WAAW,EAAE,KAAKxB,WAAL,CAAiBkB,IAAjB,CAAsB,IAAtB,CADf;AAEE,QAAA,kBAAkB,EAAE,KAAK/F,kBAF3B;AAGE,QAAA,cAAc,EAAE,KAAKoD,cAHvB;AAIE,QAAA,QAAQ,EAAE1D,QAJZ;AAKE,QAAA,aAAa,EAAE,KAAKoG,aALtB;AAME,QAAA,0BAA0B,EAAE,KAAKb,0BANnC;AAOE,QAAA,oBAAoB,EAAE,KAAKhB,oBAP7B;AAQE,QAAA,KAAK,EAAEkB,KART;AASE,QAAA,aAAa,EAAE,KAAKG,aATtB;AAUE,QAAA,YAAY,EAAE/F,YAVhB;AAWE,QAAA,QAAQ,EAAEM,QAXZ;AAYE,QAAA,QAAQ,EAAE,KAAKuC,QAZjB;AAaE,QAAA,SAAS,EAAEiD,SAbb;AAcE,QAAA,QAAQ,EAAEtF,QAdZ;AAeE,QAAA,QAAQ,EAAE,KAAKqB,aAfjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAqBD;AACF;;AAzHoC;;AA4HvC,SAASkF,eAAT,CAAyBlB,KAAzB,EAAgC;AAC9B,SAAO;AAAE3B,IAAAA,QAAQ,EAAE2B,KAAK,CAACmB,eAAN,CAAsB9C;AAAlC,GAAP;AACD;;AAED,MAAM+C,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLhI,IAAAA,gBAAgB,EAAEmC,IAAI,IAAI6F,QAAQ,CAAChI,gBAAgB,CAACmC,IAAD,CAAjB,CAD7B;AAELmD,IAAAA,cAAc,EAAEnD,IAAI,IAAI6F,QAAQ,CAAC/H,gBAAgB,CAACkC,IAAD,CAAjB,CAF3B;AAGLjC,IAAAA,eAAe,EAAE,MAAM8H,QAAQ,CAAC9H,eAAe,EAAhB;AAH1B,GAAP;AAKD,CAND;;AAQA,eAAeJ,OAAO,CAAC+H,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C1B,QAA7C,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport socketIOClient from \"socket.io-client\";\n\nimport {\n  updateLoginState,\n  updateCategories,\n  resetLoginState\n} from \"../redux/actions\";\nimport fetchData from \"../shared/sharedFunctions\";\nimport { Routes, ServerUrl } from \"../shared/config\";\nimport TimelineBodyComponent from \"./timelineBodyComponent\";\n\nconst {\n  Likes,\n  Category,\n  Upload,\n  AllPosts,\n  UserData,\n  TotalNumberOfPosts\n} = Routes;\n\nconst zero = 0;\nlet hasMoreItems = true;\nlet totalPosts = \"\";\nlet clicked = false;\nlet username = \"\";\nlet emailId = \"\";\nlet myUploads = false;\nlet postdata = [];\nlet endpoint = ServerUrl;\nlet hasError = false;\n\nconst categoryUploadForm = function() {\n  if (!clicked) {\n    clicked = true;\n    const form =\n      \"category<input type='text' name='category' required/><br /><br /><input type='submit'/> &emsp;\";\n    document.getElementById(\"category\").innerHTML = form;\n  } else {\n    document.getElementById(\"category\").innerHTML = \"\";\n    clicked = false;\n  }\n};\n\nconst userDetails = function() {\n  let UserID = { id: localStorage.getItem(\"userId\") };\n  fetchData(UserData, UserID)\n    .then(res => {\n      if (res && res.data) username = res.data[zero]?.username;\n      emailId = res.data[zero]?.email;\n    })\n    .catch(err => {\n      if (err.message === \"Network Error\") {\n        this.props.history.push(\"/errorpage\");\n      }\n    });\n};\nconst DownloadImage = function(image) {\n  fetch(ServerUrl + \"/\" + image).then(response => {\n    response.blob().then(blob => {\n      let url = window.URL.createObjectURL(blob);\n      let a = document.createElement(\"a\");\n      a.href = url;\n      a.download = image;\n      a.click();\n    });\n  });\n};\n\nconst totalNumberPosts = function() {\n  const data = { email: myUploads ? emailId : null };\n  fetchData(TotalNumberOfPosts, data)\n    .then(res => {\n      if (res) {\n        totalPosts = res.data?.counts;\n      }\n    })\n    .catch(err => {\n      if (err.message === \"Network Error\") {\n        this.props.history.push(\"/errorpage\");\n      }\n    });\n};\n\nconst likePost = function(postID) {\n  let likedData = {\n    postId: postID,\n    userId: localStorage.getItem(\"userId\")\n  };\n  fetchData(Likes, likedData)\n    .then(res => {\n      if (res?.data) {\n        let likeData = res?.data?.dataFromDatabase[0];\n        for (let i = zero; i < postdata.length; i++) {\n          if (postdata[i]._id === likeData._id) {\n            let newpostData = postdata;\n            newpostData[i].likes = likeData.likes;\n            postdata = newpostData;\n          }\n        }\n      }\n    })\n    .catch(err => {\n      if (err.message === \"Network Error\") {\n        this.props.history.push(\"/errorpage\");\n      }\n    });\n};\n\nconst setupSocket = function() {\n  const socket = socketIOClient(endpoint);\n  socket.on(\"FromAPI\", data => (this.response = data));\n};\n\nconst checkIfNotlogin = function() {\n  if (!localStorage.getItem(\"userId\")) {\n    this.props.history.push(\"/login\");\n  }\n};\n\nconst uploadCategory = function(event) {\n  event.preventDefault();\n  let newCategory = event.target.category.value;\n  const categoryToBeUploaded = { category: newCategory };\n  fetchData(Category, categoryToBeUploaded)\n    .then(res => {\n      if (res && res.data && res.data.status === \"Category Inserted\") {\n        let allCategory = res?.data?.dataFromDatabase?.map(data => {\n          return data;\n        });\n        this.props.updateCategory(allCategory);\n      }\n      if (res && res.data?.status === \"Already Exist\") {\n        alert(\"This category already exist\");\n      }\n    })\n    .catch(err => {\n      if (err.message === \"Network Error\") {\n        this.props.history.push(\"/errorpage\");\n      }\n    });\n  clicked = false;\n  document.getElementById(\"category\").innerHTML = \"\";\n};\n\nconst handlePostUploadForm = function(event) {\n  event.preventDefault();\n  if (event?.target?.category?.value === \"none\") {\n    document.getElementById(\"category123\").focus();\n  } else {\n    let category = event.target.category.value;\n    let file = event.target.file.files[0];\n    let caption = event.target.description.value;\n    let userName = username;\n    let userEmail = emailId;\n    const formdata = new FormData();\n    formdata.append(\"username\", userName);\n    formdata.append(\"email\", userEmail);\n    formdata.append(\"caption\", caption);\n    formdata.append(\"category\", category);\n    formdata.append(\"file\", file);\n    fetchData(Upload, formdata)\n      .then(res => {\n        if (res && res.data?.status === \"Post Inserted\") {\n          this.allPost(zero);\n        } else {\n          alert(\"not inserted\");\n        }\n        this.togglePopup();\n      })\n      .catch(err => {\n        hasError = true;\n      });\n  }\n};\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.response = false;\n    this.state = {\n      showPopup: false,\n      items: zero\n    };\n    this.handlePostUploadForm = handlePostUploadForm.bind(this);\n    this.userDetails = userDetails.bind(this);\n    this.DownloadImage = DownloadImage.bind(this);\n    this.categoryUploadForm = categoryUploadForm.bind(this);\n    this.totalNumberPosts = totalNumberPosts.bind(this);\n    this.likePost = likePost.bind(this);\n    this.setupSocket = setupSocket.bind(this);\n    this.checkIfNotlogin = checkIfNotlogin.bind(this);\n    this.uploadCategory = uploadCategory.bind(this);\n    this.handlePostUploadForm = handlePostUploadForm.bind(this);\n  }\n\n  static getDerivedStateFromError(error) {\n    return (hasError = true);\n  }\n\n  componentDidMount() {\n    this.checkIfNotlogin();\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n    this.setupSocket();\n    this.totalNumberPosts();\n    this.userDetails();\n  }\n\n  stateUpdateOnTimelineClick = async () => {\n    this.setState({ items: zero });\n    myUploads = false;\n    hasMoreItems = true;\n    await this.totalNumberPosts();\n    await this.allPost(this.state.items);\n  };\n\n  togglePopup = () => {\n    this.setState({ showPopup: !this.state.showPopup });\n  };\n\n  loadMorePosts = () => {\n    if (this.state.items <= totalPosts) {\n      setTimeout(async () => {\n        await this.allPost(this.state.items);\n      }, 1000);\n    } else {\n      hasMoreItems = false;\n    }\n    return new Promise(resolve => {\n      resolve(true);\n    });\n  };\n\n  allPost = skipPosts => {\n    const post = {\n      Skip: skipPosts,\n      email: myUploads ? emailId : false\n    };\n    fetchData(AllPosts, post)\n      .then(res => {\n        if (res) {\n          let allPostsData = res.data?.dataFromDatabase;\n          if (skipPosts === zero) {\n            postdata = allPostsData;\n            this.setState({ items: skipPosts + 5 });\n          } else {\n            postdata = [...postdata, ...allPostsData];\n            this.setState({ items: skipPosts + 5 });\n          }\n        }\n      })\n      .catch(err => {\n        hasError = true;\n      });\n  };\n\n  showMyUploads = async () => {\n    this.setState({ items: zero });\n    myUploads = true;\n    hasMoreItems = true;\n    await this.totalNumberPosts();\n    await this.allPost(this.state.items);\n  };\n\n  render() {\n    const { showPopup, items } = this.state;\n    if (hasError) {\n      return (\n        <div>\n          <h1 style={{ padding: \"200px 450px\", color: \"#f47b13\" }}>\n            404 | Something went wrong\n          </h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <TimelineBodyComponent\n            togglePopup={this.togglePopup.bind(this)}\n            categoryUploadForm={this.categoryUploadForm}\n            uploadCategory={this.uploadCategory}\n            username={username}\n            showMyUploads={this.showMyUploads}\n            stateUpdateOnTimelineClick={this.stateUpdateOnTimelineClick}\n            handlePostUploadForm={this.handlePostUploadForm}\n            items={items}\n            loadMorePosts={this.loadMorePosts}\n            hasMoreItems={hasMoreItems}\n            postdata={postdata}\n            likePost={this.likePost}\n            showPopup={showPopup}\n            hasError={hasError}\n            downLoad={this.DownloadImage}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { category: state.CategoryReducer.category };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data)),\n    updateCategory: data => dispatch(updateCategories(data)),\n    resetLoginState: () => dispatch(resetLoginState())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timeline);\n"]},"metadata":{},"sourceType":"module"}