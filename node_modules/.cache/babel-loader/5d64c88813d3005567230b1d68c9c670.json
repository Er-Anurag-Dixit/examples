{"ast":null,"code":"var _jsxFileName = \"/home/com109/Desktop/ad/my-app/src/timeline/timelineBodyComponent.js\";\nimport React, { useCallback, useState } from \"react\"; // import InfiniteLoader from \"react-window-infinite-loader\";\n\nimport Helmet from \"react-helmet\"; // import { FixedSizeList } from \"react-window\";\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Popup from \"./popup.js\";\nimport RightButton from \"./rightButton\";\nimport \"./style.css\";\nimport Featured from \"../shared/featured\";\nimport UserProfileComponent from \"./userProfileComponent\";\nimport CategoryList from \"../shared/categories\";\nimport Scroller from \"./scroller\";\nimport fetchData from \"../shared/sharedFunctions\"; // import CategoryForm from \"../shared/categoryForm\";\n\nimport CategoryComponent from \"../shared/CategoryComponent\";\nimport { Routes } from \"../config\";\nconst {\n  Upload_Category\n} = Routes; // let clicked = false;\n\nconst TimelineBodyComponent = props => {\n  // const getPost = ({ index, style }) => {\n  //   if (props.postdata[index]) {\n  //     return (\n  //       <Post\n  //         style={style}\n  //         data={props.postdata[index]}\n  //         likePost={props.likePost}\n  //         downLoad={props.downLoad}\n  //       />\n  //     );\n  //   } else {\n  //     return null;\n  //   }\n  // };\n  // const callBackFunction = useCallback(\n  //   id => {\n  //     props.likePost(id);\n  //   },\n  //   [props.likePost]\n  // );\n  const [clicked, setClicked] = useState(false);\n\n  const categoryUploadForm = () => {\n    if (!clicked) {\n      setClicked(true); // const form =\n      // \"category<input type='text' name='category' required/><br /><br /><input type='submit'/> &emsp;\";\n      // document.getElementById(\"category\").innerHTML = form;\n      // } else {\n      // document.getElementById(\"category\").innerHTML = \"\";\n      // clicked = false;\n    }\n  };\n\n  const uploadCategory = function (event) {\n    event.preventDefault();\n    let check = false;\n    props.category.map(data => {\n      if (data.category === event.target.category.value.toLowerCase()) {\n        check = true;\n      }\n    });\n\n    if (check) {\n      alert(\"This category already exist\");\n      event.target.category.value = \"\";\n    } else {\n      let newCategory = event.target.category.value;\n      const categoryToBeUploaded = {\n        category: newCategory\n      };\n      fetchData(Upload_Category, categoryToBeUploaded).then(res => {\n        if (res && res.data && res.data.status === \"Category Inserted\") {\n          var _res$data, _res$data$dataFromDat;\n\n          let allCategory = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$dataFromDat = _res$data.dataFromDatabase) === null || _res$data$dataFromDat === void 0 ? void 0 : _res$data$dataFromDat.map(data => {\n            return data;\n          });\n          this.props.updateCategory(allCategory);\n        } // if (res && res.data?.status === \"Already Exist\") {\n        // }\n\n      }).catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n      setClicked(false);\n    }\n  };\n\n  const {\n    togglePopup,\n    // categoryUploadForm,\n    // uploadCategory,\n    username,\n    showMyUploads,\n    stateUpdateOnTimelineClick,\n    handlePostUploadForm,\n    // items,\n    loadMorePosts,\n    hasMoreItems,\n    postdata,\n    likePost,\n    hasError,\n    downLoad\n  } = props;\n\n  if (hasError) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Something is wrong\");\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(Helmet, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"title\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Timeline\")), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"content_rgt\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(RightButton, {\n    togglePopup: togglePopup.bind(this),\n    categoryUploadForm: categoryUploadForm,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(CategoryComponent, {\n    uploadCategory: uploadCategory,\n    clicked: clicked,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }), React.createElement(Featured, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"content_lft\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(UserProfileComponent, {\n    username: username,\n    showMyUploads: showMyUploads,\n    stateUpdateOnTimelineClick: stateUpdateOnTimelineClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, props.showPopup ? React.createElement(Popup, {\n    handleSubmit: handlePostUploadForm,\n    togglePopup: togglePopup,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }) : null), React.createElement(Scroller, {\n    onlikePost: likePost,\n    postdata: postdata,\n    downLoad: downLoad,\n    loadMorePosts: loadMorePosts,\n    hasMoreItems: hasMoreItems,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  })))));\n};\n\nTimelineBodyComponent.propTypes = {\n  logout: PropTypes.func,\n  togglePopup: PropTypes.func,\n  // categoryUploadForm: PropTypes.func,\n  // uploadCategory: PropTypes.func,\n  username: PropTypes.string,\n  showMyUploads: PropTypes.func,\n  stateUpdateOnTimelineClick: PropTypes.func,\n  handlePostUploadForm: PropTypes.func,\n  items: PropTypes.number,\n  loadMorePosts: PropTypes.func,\n  hasMoreItems: PropTypes.bool,\n  postdata: PropTypes.array,\n  likePost: PropTypes.func,\n  showPopup: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n  return {\n    category: state.CategoryReducer.category\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateCategory: data => dispatch(updateCategories(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TimelineBodyComponent);","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/timeline/timelineBodyComponent.js"],"names":["React","useCallback","useState","Helmet","PropTypes","connect","Popup","RightButton","Featured","UserProfileComponent","CategoryList","Scroller","fetchData","CategoryComponent","Routes","Upload_Category","TimelineBodyComponent","props","clicked","setClicked","categoryUploadForm","uploadCategory","event","preventDefault","check","category","map","data","target","value","toLowerCase","alert","newCategory","categoryToBeUploaded","then","res","status","allCategory","dataFromDatabase","updateCategory","catch","err","message","history","push","togglePopup","username","showMyUploads","stateUpdateOnTimelineClick","handlePostUploadForm","loadMorePosts","hasMoreItems","postdata","likePost","hasError","downLoad","bind","showPopup","propTypes","logout","func","string","items","number","bool","array","mapStateToProps","state","CategoryReducer","mapDispatchToProps","dispatch","updateCategories"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from \"react\";\n// import InfiniteLoader from \"react-window-infinite-loader\";\nimport Helmet from \"react-helmet\";\n// import { FixedSizeList } from \"react-window\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport Popup from \"./popup.js\";\nimport RightButton from \"./rightButton\";\nimport \"./style.css\";\nimport Featured from \"../shared/featured\";\nimport UserProfileComponent from \"./userProfileComponent\";\nimport CategoryList from \"../shared/categories\";\nimport Scroller from \"./scroller\";\nimport fetchData from \"../shared/sharedFunctions\";\n// import CategoryForm from \"../shared/categoryForm\";\nimport CategoryComponent from \"../shared/CategoryComponent\";\nimport { Routes } from \"../config\";\n\nconst { Upload_Category } = Routes;\n// let clicked = false;\n\nconst TimelineBodyComponent = props => {\n  // const getPost = ({ index, style }) => {\n  //   if (props.postdata[index]) {\n  //     return (\n  //       <Post\n  //         style={style}\n  //         data={props.postdata[index]}\n  //         likePost={props.likePost}\n  //         downLoad={props.downLoad}\n  //       />\n  //     );\n  //   } else {\n  //     return null;\n  //   }\n  // };\n  // const callBackFunction = useCallback(\n  //   id => {\n  //     props.likePost(id);\n  //   },\n  //   [props.likePost]\n  // );\n\n  const [clicked, setClicked] = useState(false);\n\n  const categoryUploadForm = () => {\n    if (!clicked) {\n      setClicked(true);\n      // const form =\n      // \"category<input type='text' name='category' required/><br /><br /><input type='submit'/> &emsp;\";\n      // document.getElementById(\"category\").innerHTML = form;\n      // } else {\n      // document.getElementById(\"category\").innerHTML = \"\";\n      // clicked = false;\n    }\n  };\n\n  const uploadCategory = function(event) {\n    event.preventDefault();\n    let check = false;\n    props.category.map(data => {\n      if (data.category === event.target.category.value.toLowerCase()) {\n        check = true;\n      }\n    });\n    if (check) {\n      alert(\"This category already exist\");\n      event.target.category.value = \"\";\n    } else {\n      let newCategory = event.target.category.value;\n      const categoryToBeUploaded = { category: newCategory };\n      fetchData(Upload_Category, categoryToBeUploaded)\n        .then(res => {\n          if (res && res.data && res.data.status === \"Category Inserted\") {\n            let allCategory = res?.data?.dataFromDatabase?.map(data => {\n              return data;\n            });\n            this.props.updateCategory(allCategory);\n          }\n          // if (res && res.data?.status === \"Already Exist\") {\n          // }\n        })\n        .catch(err => {\n          if (err.message === \"Network Error\") {\n            this.props.history.push(\"/errorpage\");\n          }\n        });\n      setClicked(false);\n    }\n  };\n\n  const {\n    togglePopup,\n    // categoryUploadForm,\n    // uploadCategory,\n    username,\n    showMyUploads,\n    stateUpdateOnTimelineClick,\n    handlePostUploadForm,\n    // items,\n    loadMorePosts,\n    hasMoreItems,\n    postdata,\n    likePost,\n    hasError,\n    downLoad\n  } = props;\n  if (hasError) {\n    return <div>Something is wrong</div>;\n  }\n  return (\n    <div>\n      <Helmet>\n        <title>Timeline</title>\n      </Helmet>\n      <div className=\"container\">\n        <div className=\"content\">\n          <div className=\"content_rgt\">\n            <RightButton\n              togglePopup={togglePopup.bind(this)}\n              categoryUploadForm={categoryUploadForm}\n            />\n            <CategoryComponent\n              uploadCategory={uploadCategory}\n              clicked={clicked}\n            />\n\n            <Featured />\n          </div>\n          <div className=\"content_lft\">\n            <UserProfileComponent\n              username={username}\n              showMyUploads={showMyUploads}\n              stateUpdateOnTimelineClick={stateUpdateOnTimelineClick}\n            />\n            <div>\n              {props.showPopup ? (\n                <Popup\n                  handleSubmit={handlePostUploadForm}\n                  togglePopup={togglePopup}\n                />\n              ) : null}\n            </div>\n            {/*<div> \n            <InfiniteLoader\n                  isItemLoaded={() => {\n                    return !hasMoreItems;\n                  }}\n                  style={{ width: \"100\" }}\n                  itemCount={10}\n                  loadMoreItems={() => {\n                    loadMorePosts();\n                  }}\n                >\n                  {({ onItemsRendered, ref }) => (\n                    <FixedSizeList\n                      height={3000}\n                      width={750}\n                      itemCount={10}\n                      itemSize={650}\n                      onItemsRendered={onItemsRendered}\n                      ref={ref}\n                    >\n                      {getPost}\n                    </FixedSizeList>\n                  )}\n                </InfiniteLoader> \n               </div>\n               */}\n            <Scroller\n              onlikePost={likePost}\n              postdata={postdata}\n              downLoad={downLoad}\n              loadMorePosts={loadMorePosts}\n              hasMoreItems={hasMoreItems}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nTimelineBodyComponent.propTypes = {\n  logout: PropTypes.func,\n  togglePopup: PropTypes.func,\n  // categoryUploadForm: PropTypes.func,\n  // uploadCategory: PropTypes.func,\n  username: PropTypes.string,\n  showMyUploads: PropTypes.func,\n  stateUpdateOnTimelineClick: PropTypes.func,\n  handlePostUploadForm: PropTypes.func,\n  items: PropTypes.number,\n  loadMorePosts: PropTypes.func,\n  hasMoreItems: PropTypes.bool,\n  postdata: PropTypes.array,\n  likePost: PropTypes.func,\n  showPopup: PropTypes.bool\n};\n\nfunction mapStateToProps(state) {\n  return { category: state.CategoryReducer.category };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateCategory: data => dispatch(updateCategories(data))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TimelineBodyComponent);\n"]},"metadata":{},"sourceType":"module"}