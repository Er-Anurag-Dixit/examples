{"ast":null,"code":"var _jsxFileName = \"/home/com109/Desktop/ad/my-app/src/timeline/timeline.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport socketIOClient from \"socket.io-client\";\nimport { updateLoginState, updateCategories, resetLoginState } from \"../redux/actions\";\nimport fetchData from \"../shared/sharedFunctions\";\nimport { Routes, ServerUrl } from \"../config\";\nimport TimelineBodyComponent from \"./timelineBodyComponent\";\nconst {\n  Likes_Post,\n  // Category,\n  Upload,\n  AllPosts,\n  UserData,\n  TotalNumberOfPosts\n} = Routes;\nconst zero = 0; // let clicked = false;\n\nlet username = \"\";\nlet emailId = \"\";\nlet myUploads = false; // let endpoint = ServerUrl;\n\nlet hasError = false; // const categoryUploadForm = function() {\n//   if (!clicked) {\n//     clicked = true;\n//     const form =\n//       \"category<input type='text' name='category' required/><br /><br /><input type='submit'/> &emsp;\";\n//     document.getElementById(\"category\").innerHTML = form;\n//   } else {\n//     document.getElementById(\"category\").innerHTML = \"\";\n//     clicked = false;\n//   }\n// };\n\nconst userDetails = function () {\n  let UserID = {\n    id: localStorage.getItem(\"userId\")\n  };\n  fetchData(UserData, UserID).then(res => {\n    var _res$data$zero, _res$data$zero2;\n\n    if (res && res.data) username = (_res$data$zero = res.data[zero]) === null || _res$data$zero === void 0 ? void 0 : _res$data$zero.username;\n    emailId = (_res$data$zero2 = res.data[zero]) === null || _res$data$zero2 === void 0 ? void 0 : _res$data$zero2.email;\n  }).catch(err => {\n    if (err.message === \"Network Error\") {\n      this.props.history.push(\"/errorpage\");\n    }\n  });\n};\n\nconst DownloadImage = function (image) {\n  fetch(ServerUrl + \"/\" + image).then(response => {\n    response.blob().then(blob => {\n      let url = window.URL.createObjectURL(blob);\n      let a = document.createElement(\"a\");\n      a.href = url;\n      a.download = image;\n      a.click();\n    });\n  });\n};\n\nconst totalNumberPosts = function () {\n  const data = {\n    email: myUploads ? emailId : null\n  };\n  fetchData(TotalNumberOfPosts, data).then(res => {\n    if (res) {\n      var _res$data;\n\n      this.totalPosts = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.counts;\n    }\n\n    new Promise(resolve => {\n      resolve = true;\n    });\n  }).catch(err => {\n    if (err.message === \"Network Error\") {\n      this.props.history.push(\"/errorpage\");\n    }\n  });\n};\n\nconst likePost = function (postID) {\n  let likedData = {\n    postId: postID,\n    userId: localStorage.getItem(\"userId\")\n  };\n  fetchData(Likes_Post, likedData).then(res => {\n    if (res === null || res === void 0 ? void 0 : res.data) {\n      var _res$data2;\n\n      let likeData = res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.dataFromDatabase[0];\n\n      for (let i = zero; i < this.state.postdata.length; i++) {\n        if (this.state.postdata[i]._id === likeData._id) {\n          let newpostData = this.state.postdata;\n          newpostData[i].likes = likeData.likes;\n          this.setState({\n            postdata: newpostData\n          });\n        }\n      }\n    }\n  }).catch(err => {\n    if (err.message === \"Network Error\") {\n      this.props.history.push(\"/errorpage\");\n    }\n  });\n}; // const setupSocket = function() {\n//   const socket = socketIOClient(endpoint);\n//   socket.on(\"FromAPI\", data => (this.response = data));\n// };\n\n\nconst checkIfNotlogin = function () {\n  if (!localStorage.getItem(\"userId\")) {\n    this.props.history.push(\"/login\");\n  }\n}; // const uploadCategory = function(event) {\n//   event.preventDefault();\n//   let newCategory = event.target.category.value;\n//   const categoryToBeUploaded = { category: newCategory };\n//   fetchData(Category, categoryToBeUploaded)\n//     .then(res => {\n//       if (res && res.data && res.data.status === \"Category Inserted\") {\n//         let allCategory = res?.data?.dataFromDatabase?.map(data => {\n//           return data;\n//         });\n//         this.props.updateCategory(allCategory);\n//       }\n//       if (res && res.data?.status === \"Already Exist\") {\n//         alert(\"This category already exist\");\n//       }\n//     })\n//     .catch(err => {\n//       if (err.message === \"Network Error\") {\n//         this.props.history.push(\"/errorpage\");\n//       }\n//     });\n//   // clicked = false;\n//   document.getElementById(\"category\").innerHTML = \"\";\n// };\n\n\nconst handlePostUploadForm = function (event) {\n  var _event$target, _event$target$categor;\n\n  event.preventDefault();\n\n  if ((event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : (_event$target$categor = _event$target.category) === null || _event$target$categor === void 0 ? void 0 : _event$target$categor.value) === \"none\") {\n    document.getElementById(\"category123\").focus();\n  } else {\n    let category = event.target.category.value;\n    let file = event.target.file.files[0];\n    let caption = event.target.description.value;\n    let userName = username;\n    let userEmail = emailId;\n    const formdata = new FormData();\n    formdata.append(\"username\", userName);\n    formdata.append(\"email\", userEmail);\n    formdata.append(\"caption\", caption);\n    formdata.append(\"category\", category);\n    formdata.append(\"file\", file);\n    fetchData(Upload, formdata).then(res => {\n      var _res$data3;\n\n      if (res && ((_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : _res$data3.status) === \"Post Inserted\") {\n        this.allPost(zero);\n      } else {\n        alert(\"not inserted\");\n      }\n\n      this.togglePopup();\n    }).catch(err => {\n      hasError = true;\n    });\n  }\n};\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.stateUpdateOnTimelineClick = async () => {\n      this.setState({\n        items: zero,\n        hasMoreItems: true\n      });\n      myUploads = false;\n      await this.totalNumberPosts();\n      await this.allPost(this.state.items);\n    };\n\n    this.togglePopup = () => {\n      this.setState({\n        showPopup: !this.state.showPopup\n      });\n    };\n\n    this.loadMorePosts = () => {\n      if (this.totalPosts) {\n        if (this.totalPosts >= this.state.items) {\n          setTimeout(async () => {\n            await this.allPost(this.state.items);\n          }, 1000);\n        } else {\n          this.setState({\n            hasMoreItems: false\n          });\n        }\n\n        return new Promise(resolve => {\n          resolve(true);\n        });\n      } else {\n        return;\n      }\n    };\n\n    this.allPost = skipPosts => {\n      const post = {\n        Skip: skipPosts,\n        email: myUploads ? emailId : false\n      };\n      fetchData(AllPosts, post).then(res => {\n        if (res) {\n          var _res$data4;\n\n          let allPostsData = (_res$data4 = res.data) === null || _res$data4 === void 0 ? void 0 : _res$data4.dataFromDatabase;\n\n          if (skipPosts === zero) {\n            this.setState({\n              postdata: allPostsData,\n              items: skipPosts + 5\n            });\n          } else {\n            this.setState({\n              items: skipPosts + 5,\n              postdata: [...this.state.postdata, ...allPostsData]\n            });\n          }\n        }\n      }).catch(err => {\n        hasError = true;\n      });\n    };\n\n    this.showMyUploads = async () => {\n      this.setState({\n        items: zero,\n        hasMoreItems: true\n      });\n      myUploads = true;\n      await this.totalNumberPosts();\n      await this.allPost(this.state.items);\n    };\n\n    this.response = false;\n    this.totalPosts = \"\";\n    this.state = {\n      hasMoreItems: true,\n      postdata: [],\n      showPopup: false,\n      items: zero\n    };\n    this.handlePostUploadForm = handlePostUploadForm.bind(this);\n    this.userDetails = userDetails.bind(this);\n    this.DownloadImage = DownloadImage.bind(this); // this.categoryUploadForm = categoryUploadForm.bind(this);\n\n    this.totalNumberPosts = totalNumberPosts.bind(this);\n    this.likePost = likePost.bind(this);\n    this.setupSocket = setupSocket.bind(this);\n    this.checkIfNotlogin = checkIfNotlogin.bind(this); // this.uploadCategory = uploadCategory.bind(this);\n\n    this.handlePostUploadForm = handlePostUploadForm.bind(this);\n    this.totalNumberPosts();\n  }\n\n  static getDerivedStateFromError(error) {\n    return hasError = true;\n  }\n\n  componentDidMount() {\n    this.checkIfNotlogin();\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n    this.setupSocket();\n    this.userDetails();\n  }\n\n  render() {\n    const {\n      showPopup,\n      items,\n      postdata,\n      hasMoreItems\n    } = this.state;\n\n    if (hasError) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          padding: \"200px 450px\",\n          color: \"#f47b13\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, \"404 | Something went wrong\"));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, React.createElement(TimelineBodyComponent, {\n        togglePopup: this.togglePopup.bind(this),\n        categoryUploadForm: this.categoryUploadForm,\n        uploadCategory: this.uploadCategory,\n        username: username,\n        showMyUploads: this.showMyUploads,\n        stateUpdateOnTimelineClick: this.stateUpdateOnTimelineClick,\n        handlePostUploadForm: this.handlePostUploadForm,\n        items: items,\n        loadMorePosts: this.loadMorePosts,\n        hasMoreItems: hasMoreItems,\n        postdata: postdata,\n        likePost: this.likePost,\n        showPopup: showPopup,\n        hasError: hasError,\n        downLoad: this.DownloadImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }));\n    }\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    category: state.CategoryReducer.category\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data)),\n    updateCategory: data => dispatch(updateCategories(data)),\n    resetLoginState: () => dispatch(resetLoginState())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timeline);","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/timeline/timeline.js"],"names":["React","connect","socketIOClient","updateLoginState","updateCategories","resetLoginState","fetchData","Routes","ServerUrl","TimelineBodyComponent","Likes_Post","Upload","AllPosts","UserData","TotalNumberOfPosts","zero","username","emailId","myUploads","hasError","userDetails","UserID","id","localStorage","getItem","then","res","data","email","catch","err","message","props","history","push","DownloadImage","image","fetch","response","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","click","totalNumberPosts","totalPosts","counts","Promise","resolve","likePost","postID","likedData","postId","userId","likeData","dataFromDatabase","i","state","postdata","length","_id","newpostData","likes","setState","checkIfNotlogin","handlePostUploadForm","event","preventDefault","target","category","value","getElementById","focus","file","files","caption","description","userName","userEmail","formdata","FormData","append","status","allPost","alert","togglePopup","Timeline","Component","constructor","stateUpdateOnTimelineClick","items","hasMoreItems","showPopup","loadMorePosts","setTimeout","skipPosts","post","Skip","allPostsData","showMyUploads","bind","setupSocket","getDerivedStateFromError","error","componentDidMount","render","padding","color","categoryUploadForm","uploadCategory","mapStateToProps","CategoryReducer","mapDispatchToProps","dispatch","updateCategory"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport socketIOClient from \"socket.io-client\";\n\nimport {\n  updateLoginState,\n  updateCategories,\n  resetLoginState\n} from \"../redux/actions\";\nimport fetchData from \"../shared/sharedFunctions\";\nimport { Routes, ServerUrl } from \"../config\";\nimport TimelineBodyComponent from \"./timelineBodyComponent\";\n\nconst {\n  Likes_Post,\n  // Category,\n  Upload,\n  AllPosts,\n  UserData,\n  TotalNumberOfPosts\n} = Routes;\n\nconst zero = 0;\n// let clicked = false;\nlet username = \"\";\nlet emailId = \"\";\nlet myUploads = false;\n// let endpoint = ServerUrl;\nlet hasError = false;\n\n// const categoryUploadForm = function() {\n//   if (!clicked) {\n//     clicked = true;\n//     const form =\n//       \"category<input type='text' name='category' required/><br /><br /><input type='submit'/> &emsp;\";\n//     document.getElementById(\"category\").innerHTML = form;\n//   } else {\n//     document.getElementById(\"category\").innerHTML = \"\";\n//     clicked = false;\n//   }\n// };\n\nconst userDetails = function() {\n  let UserID = { id: localStorage.getItem(\"userId\") };\n  fetchData(UserData, UserID)\n    .then(res => {\n      if (res && res.data) username = res.data[zero]?.username;\n      emailId = res.data[zero]?.email;\n    })\n    .catch(err => {\n      if (err.message === \"Network Error\") {\n        this.props.history.push(\"/errorpage\");\n      }\n    });\n};\n\nconst DownloadImage = function(image) {\n  fetch(ServerUrl + \"/\" + image).then(response => {\n    response.blob().then(blob => {\n      let url = window.URL.createObjectURL(blob);\n      let a = document.createElement(\"a\");\n      a.href = url;\n      a.download = image;\n      a.click();\n    });\n  });\n};\n\nconst totalNumberPosts = function() {\n  const data = { email: myUploads ? emailId : null };\n  fetchData(TotalNumberOfPosts, data)\n    .then(res => {\n      if (res) {\n        this.totalPosts = res.data?.counts;\n      }\n      new Promise(resolve => {\n        resolve = true;\n      });\n    })\n    .catch(err => {\n      if (err.message === \"Network Error\") {\n        this.props.history.push(\"/errorpage\");\n      }\n    });\n};\n\nconst likePost = function(postID) {\n  let likedData = {\n    postId: postID,\n    userId: localStorage.getItem(\"userId\")\n  };\n  fetchData(Likes_Post, likedData)\n    .then(res => {\n      if (res?.data) {\n        let likeData = res?.data?.dataFromDatabase[0];\n        for (let i = zero; i < this.state.postdata.length; i++) {\n          if (this.state.postdata[i]._id === likeData._id) {\n            let newpostData = this.state.postdata;\n            newpostData[i].likes = likeData.likes;\n            this.setState({ postdata: newpostData });\n          }\n        }\n      }\n    })\n    .catch(err => {\n      if (err.message === \"Network Error\") {\n        this.props.history.push(\"/errorpage\");\n      }\n    });\n};\n\n// const setupSocket = function() {\n//   const socket = socketIOClient(endpoint);\n//   socket.on(\"FromAPI\", data => (this.response = data));\n// };\n\nconst checkIfNotlogin = function() {\n  if (!localStorage.getItem(\"userId\")) {\n    this.props.history.push(\"/login\");\n  }\n};\n\n// const uploadCategory = function(event) {\n//   event.preventDefault();\n//   let newCategory = event.target.category.value;\n//   const categoryToBeUploaded = { category: newCategory };\n//   fetchData(Category, categoryToBeUploaded)\n//     .then(res => {\n//       if (res && res.data && res.data.status === \"Category Inserted\") {\n//         let allCategory = res?.data?.dataFromDatabase?.map(data => {\n//           return data;\n//         });\n//         this.props.updateCategory(allCategory);\n//       }\n//       if (res && res.data?.status === \"Already Exist\") {\n//         alert(\"This category already exist\");\n//       }\n//     })\n//     .catch(err => {\n//       if (err.message === \"Network Error\") {\n//         this.props.history.push(\"/errorpage\");\n//       }\n//     });\n//   // clicked = false;\n//   document.getElementById(\"category\").innerHTML = \"\";\n// };\n\nconst handlePostUploadForm = function(event) {\n  event.preventDefault();\n  if (event?.target?.category?.value === \"none\") {\n    document.getElementById(\"category123\").focus();\n  } else {\n    let category = event.target.category.value;\n    let file = event.target.file.files[0];\n    let caption = event.target.description.value;\n    let userName = username;\n    let userEmail = emailId;\n    const formdata = new FormData();\n    formdata.append(\"username\", userName);\n    formdata.append(\"email\", userEmail);\n    formdata.append(\"caption\", caption);\n    formdata.append(\"category\", category);\n    formdata.append(\"file\", file);\n    fetchData(Upload, formdata)\n      .then(res => {\n        if (res && res.data?.status === \"Post Inserted\") {\n          this.allPost(zero);\n        } else {\n          alert(\"not inserted\");\n        }\n        this.togglePopup();\n      })\n      .catch(err => {\n        hasError = true;\n      });\n  }\n};\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.response = false;\n    this.totalPosts = \"\";\n    this.state = {\n      hasMoreItems: true,\n      postdata: [],\n      showPopup: false,\n      items: zero\n    };\n    this.handlePostUploadForm = handlePostUploadForm.bind(this);\n    this.userDetails = userDetails.bind(this);\n    this.DownloadImage = DownloadImage.bind(this);\n    // this.categoryUploadForm = categoryUploadForm.bind(this);\n    this.totalNumberPosts = totalNumberPosts.bind(this);\n    this.likePost = likePost.bind(this);\n    this.setupSocket = setupSocket.bind(this);\n    this.checkIfNotlogin = checkIfNotlogin.bind(this);\n    // this.uploadCategory = uploadCategory.bind(this);\n    this.handlePostUploadForm = handlePostUploadForm.bind(this);\n    this.totalNumberPosts();\n  }\n\n  static getDerivedStateFromError(error) {\n    return (hasError = true);\n  }\n\n  componentDidMount() {\n    this.checkIfNotlogin();\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n    this.setupSocket();\n    this.userDetails();\n  }\n  stateUpdateOnTimelineClick = async () => {\n    this.setState({ items: zero, hasMoreItems: true });\n    myUploads = false;\n    await this.totalNumberPosts();\n    await this.allPost(this.state.items);\n  };\n\n  togglePopup = () => {\n    this.setState({ showPopup: !this.state.showPopup });\n  };\n\n  loadMorePosts = () => {\n    if (this.totalPosts) {\n      if (this.totalPosts >= this.state.items) {\n        setTimeout(async () => {\n          await this.allPost(this.state.items);\n        }, 1000);\n      } else {\n        this.setState({ hasMoreItems: false });\n      }\n      return new Promise(resolve => {\n        resolve(true);\n      });\n    } else {\n      return;\n    }\n  };\n\n  allPost = skipPosts => {\n    const post = {\n      Skip: skipPosts,\n      email: myUploads ? emailId : false\n    };\n    fetchData(AllPosts, post)\n      .then(res => {\n        if (res) {\n          let allPostsData = res.data?.dataFromDatabase;\n          if (skipPosts === zero) {\n            this.setState({ postdata: allPostsData, items: skipPosts + 5 });\n          } else {\n            this.setState({\n              items: skipPosts + 5,\n              postdata: [...this.state.postdata, ...allPostsData]\n            });\n          }\n        }\n      })\n      .catch(err => {\n        hasError = true;\n      });\n  };\n\n  showMyUploads = async () => {\n    this.setState({ items: zero, hasMoreItems: true });\n    myUploads = true;\n    await this.totalNumberPosts();\n    await this.allPost(this.state.items);\n  };\n\n  render() {\n    const { showPopup, items, postdata, hasMoreItems } = this.state;\n    if (hasError) {\n      return (\n        <div>\n          <h1 style={{ padding: \"200px 450px\", color: \"#f47b13\" }}>\n            404 | Something went wrong\n          </h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <TimelineBodyComponent\n            togglePopup={this.togglePopup.bind(this)}\n            categoryUploadForm={this.categoryUploadForm}\n            uploadCategory={this.uploadCategory}\n            username={username}\n            showMyUploads={this.showMyUploads}\n            stateUpdateOnTimelineClick={this.stateUpdateOnTimelineClick}\n            handlePostUploadForm={this.handlePostUploadForm}\n            items={items}\n            loadMorePosts={this.loadMorePosts}\n            hasMoreItems={hasMoreItems}\n            postdata={postdata}\n            likePost={this.likePost}\n            showPopup={showPopup}\n            hasError={hasError}\n            downLoad={this.DownloadImage}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { category: state.CategoryReducer.category };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data)),\n    updateCategory: data => dispatch(updateCategories(data)),\n    resetLoginState: () => dispatch(resetLoginState())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timeline);\n"]},"metadata":{},"sourceType":"module"}