{"ast":null,"code":"import { takeEvery } from \"redux-saga/effects\";\nimport { updateCategories } from \"../redux/actions\";\nimport serverCall from \"../utilsFolder/utils\";\nimport { Routes } from \"../../config\";\nconst {\n  Upload_Category,\n  Upload\n} = Routes;\n\nfunction* allcategories() {\n  serverCall(AllCategory).then(res => {\n    if (res && res.data) {\n      var _res$data, _res$data$dataFromDat;\n\n      let allCategoryData = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$dataFromDat = _res$data.dataFromDatabase) === null || _res$data$dataFromDat === void 0 ? void 0 : _res$data$dataFromDat.map(category => {\n        return category;\n      });\n      updateCategories(allCategoryData);\n    }\n  });\n}\n\nfunction* WatchEveryCategoryUpdate(data) {\n  yield takeEvery(\"all_category\", allcategories);\n}","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/redux/saga.js"],"names":["takeEvery","updateCategories","serverCall","Routes","Upload_Category","Upload","allcategories","AllCategory","then","res","data","allCategoryData","dataFromDatabase","map","category","WatchEveryCategoryUpdate"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,MAAT,QAAuB,cAAvB;AAEA,MAAM;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA;AAAnB,IAA8BF,MAApC;;AAEA,UAAUG,aAAV,GAA0B;AACxBJ,EAAAA,UAAU,CAACK,WAAD,CAAV,CAAwBC,IAAxB,CAA6BC,GAAG,IAAI;AAClC,QAAIA,GAAG,IAAIA,GAAG,CAACC,IAAf,EAAqB;AAAA;;AACnB,UAAIC,eAAe,gBAAGF,GAAG,CAACC,IAAP,uEAAG,UAAUE,gBAAb,0DAAG,sBAA4BC,GAA5B,CAAgCC,QAAQ,IAAI;AAChE,eAAOA,QAAP;AACD,OAFqB,CAAtB;AAGAb,MAAAA,gBAAgB,CAACU,eAAD,CAAhB;AACD;AACF,GAPD;AAQD;;AAED,UAAUI,wBAAV,CAAmCL,IAAnC,EAAyC;AACvC,QAAMV,SAAS,CAAC,cAAD,EAAiBM,aAAjB,CAAf;AACD","sourcesContent":["import { takeEvery } from \"redux-saga/effects\";\nimport { updateCategories } from \"../redux/actions\";\nimport serverCall from \"../utilsFolder/utils\";\nimport { Routes } from \"../../config\";\n\nconst { Upload_Category, Upload } = Routes;\n\nfunction* allcategories() {\n  serverCall(AllCategory).then(res => {\n    if (res && res.data) {\n      let allCategoryData = res.data?.dataFromDatabase?.map(category => {\n        return category;\n      });\n      updateCategories(allCategoryData);\n    }\n  });\n}\n\nfunction* WatchEveryCategoryUpdate(data) {\n  yield takeEvery(\"all_category\", allcategories);\n}\n"]},"metadata":{},"sourceType":"module"}