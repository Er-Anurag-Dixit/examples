{"ast":null,"code":"var _jsxFileName = \"/home/com109/Desktop/ad/my-app/src/screens/singlepost.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateLoginState } from \"../redux/actions\";\nimport SinglePostComponent from \"../singlepost/singlepostcomponent\";\nimport { ServerUrl, Routes } from \"../config\";\nimport serverCall, { ErrorMessage } from \"../utilsFolder/utils\";\nconst {\n  Likes_Post,\n  ImageData\n} = Routes;\nconst zero = 0;\n\nclass SinglePost extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.likePost = postID => {\n      let likedData = {\n        postId: postID,\n        userId: localStorage.getItem(\"userId\")\n      };\n      serverCall(Likes_Post, likedData).then(res => {\n        if (res) {\n          let PostDataOnLike = this.state.PostData;\n          PostDataOnLike[zero].likes = res.data.dataFromDatabase[zero].likes;\n          this.setState({\n            PostData: PostDataOnLike\n          });\n        }\n      });\n    };\n\n    this.updatePostData = () => {\n      let postData = this.state.PostData;\n      postData[0].noOfComments = String(Number(postData[0].noOfComments) + 1);\n      this.setState({\n        PostData: postData\n      });\n    };\n\n    this.getImageData = () => {\n      let imageID = {\n        id: this.state.imageId\n      };\n      serverCall(ImageData, imageID).then(res => {\n        if (res) {\n          this.setState({\n            PostData: [res.data.dataBase[0]]\n          });\n        }\n      }).catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n    };\n\n    this.notLogin = () => {\n      if (!localStorage.getItem(\"userId\")) {\n        this.props.history.push(\"/login\");\n      }\n    };\n\n    this.DownloadImage = image => {\n      fetch(ServerUrl + \"/\" + image).then(response => {\n        response.blob().then(blob => {\n          let url = window.URL.createObjectURL(blob);\n          let a = document.createElement(\"a\");\n          a.href = url;\n          a.download = image;\n          a.click();\n        });\n      });\n    };\n\n    this.state = {\n      imageId: this.props.match.params.id,\n      image: \"\",\n      username: \"\",\n      comment: [],\n      caption: \"\",\n      PostData: \"\" // hasError: false\n\n    };\n  }\n\n  componentDidMount() {\n    this.notLogin();\n    this.getImageData();\n    window.scrollTo(0, 0);\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(SinglePostComponent, {\n      history: this.props.history,\n      PostData: this.state.PostData,\n      likePost: this.likePost,\n      comment: this.state.comment,\n      uploadComment: this.uploadComment,\n      Download: this.DownloadImage,\n      imageId: this.state.imageId,\n      updatePostData: this.updatePostData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    category: state.CategoryReducer.category\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SinglePost);","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/screens/singlepost.js"],"names":["React","connect","updateLoginState","SinglePostComponent","ServerUrl","Routes","serverCall","ErrorMessage","Likes_Post","ImageData","zero","SinglePost","Component","constructor","props","likePost","postID","likedData","postId","userId","localStorage","getItem","then","res","PostDataOnLike","state","PostData","likes","data","dataFromDatabase","setState","updatePostData","postData","noOfComments","String","Number","getImageData","imageID","id","imageId","dataBase","catch","err","message","history","push","notLogin","DownloadImage","image","fetch","response","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","click","match","params","username","comment","caption","componentDidMount","scrollTo","render","uploadComment","mapStateToProps","category","CategoryReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { updateLoginState } from \"../redux/actions\";\nimport SinglePostComponent from \"../singlepost/singlepostcomponent\";\nimport { ServerUrl, Routes } from \"../config\";\nimport serverCall, { ErrorMessage } from \"../utilsFolder/utils\";\n\nconst { Likes_Post, ImageData } = Routes;\nconst zero = 0;\n\nclass SinglePost extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageId: this.props.match.params.id,\n      image: \"\",\n      username: \"\",\n      comment: [],\n      caption: \"\",\n      PostData: \"\"\n      // hasError: false\n    };\n  }\n  likePost = postID => {\n    let likedData = {\n      postId: postID,\n      userId: localStorage.getItem(\"userId\")\n    };\n    serverCall(Likes_Post, likedData).then(res => {\n      if (res) {\n        let PostDataOnLike = this.state.PostData;\n        PostDataOnLike[zero].likes = res.data.dataFromDatabase[zero].likes;\n        this.setState({ PostData: PostDataOnLike });\n      }\n    });\n  };\n\n  // allComments = () => {\n  //   const imageId = this.state.imageId;\n  //   const data = {\n  //     imageId: imageId\n  //   };\n  //   serverCall(AllComments, data)\n  //     .then(res => {\n  //       if (res) {\n  //         const allCommentData = res.data.dataFromDatabase.map(data => {\n  //           return data;\n  //         });\n  //         this.setState({ comment: allCommentData });\n  //       }\n  //     })\n  //     .catch(err => {\n  //       if (err.message === \"Network Error\") {\n  //         this.props.history.push(\"/errorpage\");\n  //       }\n  //     });\n  // };\n\n  updatePostData = () => {\n    let postData = this.state.PostData;\n    postData[0].noOfComments = String(Number(postData[0].noOfComments) + 1);\n    this.setState({ PostData: postData });\n  };\n\n  // uploadComment = event => {\n  //   event.preventDefault();\n  //   let userid = localStorage?.getItem(\"userId\");\n  //   const commentData = {\n  //     imageId: this.state?.imageId,\n  //     comment: event.target?.comment?.value,\n  //     userId: userid\n  //   };\n  //   serverCall(Comments, commentData)\n  //     .then(res => {\n  //       if (res && res.data) {\n  //         // let postData = this.state.PostData;\n  //         // postData[0].noOfComments = String(\n  //         //   Number(postData[0].noOfComments) + 1\n  //         // );\n  //         // this.setState({ PostData: postData });\n  //         // let imageID = { id: this.state?.imageId };\n  //         // serverCall(ImageData, imageID).then(res => {\n  //         //   if (res) {\n  //         //     this.setState({\n  //         //       PostData: [res?.data?.dataBase[0]],\n  //         //       comment: [...comments]\n  //         //     });\n  //         //   }\n  //         // });\n  //       }\n  //     })\n  //     .catch(err => {\n  //       if (err.message === \"Network Error\") {\n  //         this.props.history.push(\"/errorpage\");\n  //       }\n  //     });\n  //   event.target.comment.value = null;\n  // };\n  getImageData = () => {\n    let imageID = { id: this.state.imageId };\n    serverCall(ImageData, imageID)\n      .then(res => {\n        if (res) {\n          this.setState({ PostData: [res.data.dataBase[0]] });\n        }\n      })\n      .catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n  };\n\n  notLogin = () => {\n    if (!localStorage.getItem(\"userId\")) {\n      this.props.history.push(\"/login\");\n    }\n  };\n\n  DownloadImage = image => {\n    fetch(ServerUrl + \"/\" + image).then(response => {\n      response.blob().then(blob => {\n        let url = window.URL.createObjectURL(blob);\n        let a = document.createElement(\"a\");\n        a.href = url;\n        a.download = image;\n        a.click();\n      });\n    });\n  };\n\n  componentDidMount() {\n    this.notLogin();\n    this.getImageData();\n    window.scrollTo(0, 0);\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n  }\n  render() {\n    return (\n      <div>\n        <SinglePostComponent\n          history={this.props.history}\n          PostData={this.state.PostData}\n          likePost={this.likePost}\n          comment={this.state.comment}\n          uploadComment={this.uploadComment}\n          Download={this.DownloadImage}\n          imageId={this.state.imageId}\n          updatePostData={this.updatePostData}\n        />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { category: state.CategoryReducer.category };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SinglePost);\n"]},"metadata":{},"sourceType":"module"}