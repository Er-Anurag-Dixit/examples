{"ast":null,"code":"var _jsxFileName = \"/home/com109/Desktop/ad/my-app/src/screens/singlepost.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateLoginState } from \"../redux/actions\";\nimport SinglePostComponent from \"../components/singlepost/singlepostcomponent\";\nimport { ServerUrl, Routes } from \"../config\";\nimport serverCall, { DownloadImage } from \"../utilsFolder/utils\";\nconst {\n  Likes_Post,\n  ImageData\n} = Routes;\nconst zero = 0;\n\nconst SinglePost = props => {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     imageId: this.props.match.params.id,\n  //     image: \"\",\n  //     username: \"\",\n  //     comment: [],\n  //     caption: \"\",\n  //     PostData: []\n  //     // hasError: false\n  //   };\n  // }\n  const [imageId, setImageId] = useState(props.match.params.id); // const [image, setImage] = useState(\"\");\n  // const [username, setUsername] = useState(\"\");\n\n  const [comment, setComment] = useState([]); // const [caption, setCaption] = useState(\"\");\n\n  const [PostData, setPostData] = useState(\"\");\n  useEffect(() => {\n    notLogin();\n    getImageData();\n    window.scrollTo(0, 0);\n    props.updateLoginState(localStorage.getItem(\"userId\"));\n  });\n\n  const likePost = postID => {\n    let likedData = {\n      postId: postID,\n      userId: localStorage.getItem(\"userId\")\n    };\n    serverCall(Likes_Post, likedData).then(res => {\n      if (res) {\n        let PostDataOnLike = this.state.PostData;\n        PostDataOnLike[zero].likes = res.data.dataFromDatabase[zero].likes;\n        setPostData([PostDataOnLike]);\n      }\n    });\n  };\n\n  const updatePostData = () => {\n    let postData = this.state.PostData;\n    postData[0].noOfComments = String(Number(postData[0].noOfComments) + 1);\n    setPostData([postData]);\n  };\n\n  const getImageData = () => {\n    let imageID = {\n      id: this.state.imageId\n    };\n    serverCall(ImageData, imageID).then(res => {\n      if (res) {\n        setPostData([res.data.dataBase[0]]);\n      }\n    }).catch(err => {\n      if (err.message === \"Network Error\") {\n        this.props.history.push(\"/errorpage\");\n      }\n    });\n  };\n\n  const notLogin = () => {\n    if (!localStorage.getItem(\"userId\")) {\n      this.props.history.push(\"/login\");\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(SinglePostComponent, {\n    history: props.history,\n    PostData: PostData,\n    likePost: likePost,\n    comment: comment,\n    uploadComment: uploadComment,\n    Download: DownloadImage,\n    imageId: imageId,\n    updatePostData: updatePostData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }));\n};\n\nfunction mapStateToProps(state) {\n  return {\n    category: state.CategoryReducer.category\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SinglePost);","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/screens/singlepost.js"],"names":["React","connect","updateLoginState","SinglePostComponent","ServerUrl","Routes","serverCall","DownloadImage","Likes_Post","ImageData","zero","SinglePost","props","imageId","setImageId","useState","match","params","id","comment","setComment","PostData","setPostData","useEffect","notLogin","getImageData","window","scrollTo","localStorage","getItem","likePost","postID","likedData","postId","userId","then","res","PostDataOnLike","state","likes","data","dataFromDatabase","updatePostData","postData","noOfComments","String","Number","imageID","dataBase","catch","err","message","history","push","uploadComment","mapStateToProps","category","CategoryReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { updateLoginState } from \"../redux/actions\";\nimport SinglePostComponent from \"../components/singlepost/singlepostcomponent\";\nimport { ServerUrl, Routes } from \"../config\";\nimport serverCall, { DownloadImage } from \"../utilsFolder/utils\";\n\nconst { Likes_Post, ImageData } = Routes;\nconst zero = 0;\n\nconst SinglePost = props => {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     imageId: this.props.match.params.id,\n  //     image: \"\",\n  //     username: \"\",\n  //     comment: [],\n  //     caption: \"\",\n  //     PostData: []\n  //     // hasError: false\n  //   };\n  // }\n\n  const [imageId, setImageId] = useState(props.match.params.id);\n  // const [image, setImage] = useState(\"\");\n  // const [username, setUsername] = useState(\"\");\n  const [comment, setComment] = useState([]);\n  // const [caption, setCaption] = useState(\"\");\n  const [PostData, setPostData] = useState(\"\");\n\n  useEffect(() => {\n    notLogin();\n    getImageData();\n    window.scrollTo(0, 0);\n    props.updateLoginState(localStorage.getItem(\"userId\"));\n  });\n\n  const likePost = postID => {\n    let likedData = {\n      postId: postID,\n      userId: localStorage.getItem(\"userId\")\n    };\n    serverCall(Likes_Post, likedData).then(res => {\n      if (res) {\n        let PostDataOnLike = this.state.PostData;\n        PostDataOnLike[zero].likes = res.data.dataFromDatabase[zero].likes;\n        setPostData([PostDataOnLike]);\n      }\n    });\n  };\n\n  const updatePostData = () => {\n    let postData = this.state.PostData;\n    postData[0].noOfComments = String(Number(postData[0].noOfComments) + 1);\n    setPostData([postData]);\n  };\n\n  const getImageData = () => {\n    let imageID = { id: this.state.imageId };\n    serverCall(ImageData, imageID)\n      .then(res => {\n        if (res) {\n          setPostData([res.data.dataBase[0]]);\n        }\n      })\n      .catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n  };\n\n  const notLogin = () => {\n    if (!localStorage.getItem(\"userId\")) {\n      this.props.history.push(\"/login\");\n    }\n  };\n\n  return (\n    <div>\n      <SinglePostComponent\n        history={props.history}\n        PostData={PostData}\n        likePost={likePost}\n        comment={comment}\n        uploadComment={uploadComment}\n        Download={DownloadImage}\n        imageId={imageId}\n        updatePostData={updatePostData}\n      />\n    </div>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return { category: state.CategoryReducer.category };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SinglePost);\n"]},"metadata":{},"sourceType":"module"}