{"ast":null,"code":"var _jsxFileName = \"/home/com109/Desktop/ad/my-app/src/timeline/timeline.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { updateLoginState, updateCategories, resetLoginState } from \"../redux/actions\";\nimport fetchData from \"../shared/sharedFunctions\";\nimport { Routes, ServerUrl } from \"../shared/config\";\nimport TimelineBodyComponent from \"./timelineBodyComponent\";\nimport socketIOClient from \"socket.io-client\";\nconst {\n  Likes,\n  Category,\n  Upload,\n  AllPosts,\n  UserData,\n  TotalNumberOfPosts\n} = Routes;\nconst zero = 0;\nlet hasMoreItems = true;\nlet totalPosts = \"\";\nlet clicked = false;\nlet username = \"\";\nlet emailId = \"\";\nlet myUploads = false;\n\nconst categoryUploadForm = function () {\n  if (!clicked) {\n    clicked = true;\n    const form = \"category<input type='text' name='category' required/><br /><br /><input type='submit'/> &emsp;\";\n    document.getElementById(\"category\").innerHTML = form;\n  } else {\n    document.getElementById(\"category\").innerHTML = \"\";\n    clicked = false;\n  }\n};\n\nconst userDetails = function () {\n  let UserID = {\n    id: localStorage.getItem(\"userId\")\n  };\n  fetchData(UserData, UserID).then(res => {\n    var _res$data$zero, _res$data$zero2;\n\n    if (res && res.data) username = (_res$data$zero = res.data[zero]) === null || _res$data$zero === void 0 ? void 0 : _res$data$zero.username;\n    emailId = (_res$data$zero2 = res.data[zero]) === null || _res$data$zero2 === void 0 ? void 0 : _res$data$zero2.email;\n  });\n};\n\nconst DownloadImage = function (image) {\n  fetch(ServerUrl + \"/\" + image).then(response => {\n    response.blob().then(blob => {\n      let url = window.URL.createObjectURL(blob);\n      let a = document.createElement(\"a\");\n      a.href = url;\n      a.download = image;\n      a.click();\n    });\n  });\n};\n\nconst totalNumberPosts = function () {\n  const data = {\n    email: myUploads ? emailId : null\n  };\n  fetchData(TotalNumberOfPosts, data).then(res => {\n    if (res) {\n      var _res$data;\n\n      totalPosts = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.counts;\n    }\n  });\n};\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.likePost = postID => {\n      let likedData = {\n        postId: postID,\n        userId: localStorage.getItem(\"userId\")\n      };\n      fetchData(Likes, likedData).then(res => {\n        if (res === null || res === void 0 ? void 0 : res.data) {\n          var _res$data2;\n\n          let likeData = res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.dataFromDatabase[0];\n\n          for (let i = zero; i < this.state.postdata.length; i++) {\n            if (this.state.postdata[i]._id === likeData._id) {\n              let newpostData = this.state.postdata;\n              newpostData[i].likes = likeData.likes;\n              this.setState({\n                postdata: newpostData\n              });\n            }\n          }\n        }\n      }).catch(err => {\n        this.setState({\n          hasError: true\n        });\n      });\n    };\n\n    this.stateUpdateOnTimelineClick = async () => {\n      this.setState({\n        items: zero\n      });\n      myUploads = false;\n      hasMoreItems = true;\n      await this.totalNumberPosts();\n      await this.allPost(this.state.items);\n    };\n\n    this.uploadCategory = event => {\n      event.preventDefault();\n      let newCategory = event.target.category.value;\n      const categoryToBeUploaded = {\n        category: newCategory\n      };\n      fetchData(Category, categoryToBeUploaded).then(res => {\n        var _res$data4;\n\n        if (res && res.data && res.data.status === \"Category Inserted\") {\n          var _res$data3, _res$data3$dataFromDa;\n\n          let allCategory = res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : (_res$data3$dataFromDa = _res$data3.dataFromDatabase) === null || _res$data3$dataFromDa === void 0 ? void 0 : _res$data3$dataFromDa.map(data => {\n            return data;\n          });\n          this.props.updateCategory(allCategory);\n        }\n\n        if (res && ((_res$data4 = res.data) === null || _res$data4 === void 0 ? void 0 : _res$data4.status) === \"Already Exist\") {\n          alert(\"This category already exist\");\n        }\n      }).catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n      clicked = false;\n      document.getElementById(\"category\").innerHTML = \"\";\n    };\n\n    this.togglePopup = () => {\n      this.setState({\n        showPopup: !this.state.showPopup\n      });\n    };\n\n    this.loadMorePosts = () => {\n      if (this.state.items <= totalPosts) {\n        setTimeout(async () => {\n          await this.allPost(this.state.items);\n        }, 1000);\n      } else {\n        hasMoreItems = false;\n      }\n\n      return new Promise(resolve => {\n        resolve(true);\n      });\n    };\n\n    this.allPost = skipPosts => {\n      const post = {\n        Skip: skipPosts,\n        email: myUploads ? emailId : false\n      };\n      fetchData(AllPosts, post).then(res => {\n        if (res) {\n          var _res$data5;\n\n          let allPostsData = (_res$data5 = res.data) === null || _res$data5 === void 0 ? void 0 : _res$data5.dataFromDatabase;\n\n          if (skipPosts === zero) {\n            this.setState({\n              postdata: allPostsData,\n              items: skipPosts + 5\n            });\n          } else {\n            this.setState({\n              postdata: [...this.state.postdata, ...allPostsData],\n              items: skipPosts + 5\n            });\n          }\n        }\n      }).catch(err => {\n        this.setState({\n          hasError: true\n        });\n      });\n    };\n\n    this.showMyUploads = async () => {\n      this.setState({\n        items: zero\n      });\n      myUploads = true;\n      hasMoreItems = true;\n      await this.totalNumberPosts();\n      await this.allPost(this.state.items);\n    };\n\n    this.checkIfNotlogin = () => {\n      if (!localStorage.getItem(\"userId\")) {\n        this.props.history.push(\"/login\");\n      }\n    };\n\n    this.setupSocket = () => {\n      const {\n        endpoint\n      } = this.state;\n      const socket = socketIOClient(endpoint);\n      socket.on(\"FromAPI\", data => this.setState({\n        response: data\n      }));\n    };\n\n    this.state = {\n      showPopup: false,\n      postdata: [],\n      items: zero,\n      response: false,\n      endpoint: ServerUrl\n    };\n    this.handlePostUploadForm = this.handlePostUploadForm.bind(this);\n    this.userDetails = userDetails.bind(this);\n    this.DownloadImage = DownloadImage.bind(this);\n    this.categoryUploadForm = categoryUploadForm.bind(this);\n  }\n\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true\n    };\n  }\n\n  componentDidMount() {\n    this.checkIfNotlogin();\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n    this.setupSocket();\n    this.totalNumberPosts();\n    this.userDetails();\n  }\n\n  handlePostUploadForm(event) {\n    var _event$target, _event$target$categor;\n\n    event.preventDefault();\n\n    if ((event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : (_event$target$categor = _event$target.category) === null || _event$target$categor === void 0 ? void 0 : _event$target$categor.value) === \"none\") {\n      document.getElementById(\"category123\").focus();\n    } else {\n      let category = event.target.category.value;\n      let file = event.target.file.files[0];\n      let caption = event.target.description.value;\n      let userName = username;\n      let userEmail = emailId;\n      const formdata = new FormData();\n      formdata.append(\"username\", userName);\n      formdata.append(\"email\", userEmail);\n      formdata.append(\"caption\", caption);\n      formdata.append(\"category\", category);\n      formdata.append(\"file\", file); // Axios.post(Server.ServerUrl + Server.Routes.Upload, formdata);\n\n      fetchData(Upload, formdata).then(res => {\n        var _res$data6;\n\n        if (res && ((_res$data6 = res.data) === null || _res$data6 === void 0 ? void 0 : _res$data6.status) === \"Post Inserted\") {\n          this.allPost(zero);\n        } else {\n          alert(\"not inserted\");\n        }\n\n        this.togglePopup();\n      }).catch(err => {\n        this.setState({\n          hasError: true\n        });\n      });\n    }\n  }\n\n  render() {\n    const {\n      hasError,\n      showPopup,\n      postdata,\n      items\n    } = this.state;\n\n    if (hasError) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          padding: \"200px 450px\",\n          color: \"#f47b13\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, \"404 | Something went wrong\"));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(TimelineBodyComponent, {\n      togglePopup: this.togglePopup.bind(this),\n      categoryUploadForm: this.categoryUploadForm,\n      uploadCategory: this.uploadCategory,\n      username: username,\n      showMyUploads: this.showMyUploads,\n      stateUpdateOnTimelineClick: this.stateUpdateOnTimelineClick,\n      handlePostUploadForm: this.handlePostUploadForm,\n      items: items,\n      loadMorePosts: this.loadMorePosts,\n      hasMoreItems: hasMoreItems,\n      postdata: postdata,\n      likePost: this.likePost,\n      showPopup: showPopup,\n      hasError: hasError,\n      downLoad: this.DownloadImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    category: state.CategoryReducer.category\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data)),\n    updateCategory: data => dispatch(updateCategories(data)),\n    resetLoginState: () => dispatch(resetLoginState())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timeline);","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/timeline/timeline.js"],"names":["React","connect","updateLoginState","updateCategories","resetLoginState","fetchData","Routes","ServerUrl","TimelineBodyComponent","socketIOClient","Likes","Category","Upload","AllPosts","UserData","TotalNumberOfPosts","zero","hasMoreItems","totalPosts","clicked","username","emailId","myUploads","categoryUploadForm","form","document","getElementById","innerHTML","userDetails","UserID","id","localStorage","getItem","then","res","data","email","DownloadImage","image","fetch","response","blob","url","window","URL","createObjectURL","a","createElement","href","download","click","totalNumberPosts","counts","Timeline","Component","constructor","props","likePost","postID","likedData","postId","userId","likeData","dataFromDatabase","i","state","postdata","length","_id","newpostData","likes","setState","catch","err","hasError","stateUpdateOnTimelineClick","items","allPost","uploadCategory","event","preventDefault","newCategory","target","category","value","categoryToBeUploaded","status","allCategory","map","updateCategory","alert","message","history","push","togglePopup","showPopup","loadMorePosts","setTimeout","Promise","resolve","skipPosts","post","Skip","allPostsData","showMyUploads","checkIfNotlogin","setupSocket","endpoint","socket","on","handlePostUploadForm","bind","getDerivedStateFromError","error","componentDidMount","focus","file","files","caption","description","userName","userEmail","formdata","FormData","append","render","padding","color","mapStateToProps","CategoryReducer","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport {\n  updateLoginState,\n  updateCategories,\n  resetLoginState\n} from \"../redux/actions\";\nimport fetchData from \"../shared/sharedFunctions\";\nimport { Routes, ServerUrl } from \"../shared/config\";\nimport TimelineBodyComponent from \"./timelineBodyComponent\";\nimport socketIOClient from \"socket.io-client\";\n\nconst {\n  Likes,\n  Category,\n  Upload,\n  AllPosts,\n  UserData,\n  TotalNumberOfPosts\n} = Routes;\n\nconst zero = 0;\nlet hasMoreItems = true;\nlet totalPosts = \"\";\nlet clicked = false;\nlet username = \"\";\nlet emailId = \"\";\nlet myUploads = false;\n\nconst categoryUploadForm = function() {\n  if (!clicked) {\n    clicked = true;\n    const form =\n      \"category<input type='text' name='category' required/><br /><br /><input type='submit'/> &emsp;\";\n    document.getElementById(\"category\").innerHTML = form;\n  } else {\n    document.getElementById(\"category\").innerHTML = \"\";\n    clicked = false;\n  }\n};\n\nconst userDetails = function() {\n  let UserID = { id: localStorage.getItem(\"userId\") };\n  fetchData(UserData, UserID).then(res => {\n    if (res && res.data) username = res.data[zero]?.username;\n    emailId = res.data[zero]?.email;\n  });\n};\nconst DownloadImage = function(image) {\n  fetch(ServerUrl + \"/\" + image).then(response => {\n    response.blob().then(blob => {\n      let url = window.URL.createObjectURL(blob);\n      let a = document.createElement(\"a\");\n      a.href = url;\n      a.download = image;\n      a.click();\n    });\n  });\n};\n\nconst totalNumberPosts = function() {\n  const data = { email: myUploads ? emailId : null };\n  fetchData(TotalNumberOfPosts, data).then(res => {\n    if (res) {\n      totalPosts = res.data?.counts;\n    }\n  });\n};\n\nclass Timeline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPopup: false,\n      postdata: [],\n      items: zero,\n      response: false,\n      endpoint: ServerUrl\n    };\n    this.handlePostUploadForm = this.handlePostUploadForm.bind(this);\n    this.userDetails = userDetails.bind(this);\n    this.DownloadImage = DownloadImage.bind(this);\n    this.categoryUploadForm = categoryUploadForm.bind(this);\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidMount() {\n    this.checkIfNotlogin();\n    this.props.updateLoginState(localStorage.getItem(\"userId\"));\n    this.setupSocket();\n    this.totalNumberPosts();\n    this.userDetails();\n  }\n\n  likePost = postID => {\n    let likedData = {\n      postId: postID,\n      userId: localStorage.getItem(\"userId\")\n    };\n    fetchData(Likes, likedData)\n      .then(res => {\n        if (res?.data) {\n          let likeData = res?.data?.dataFromDatabase[0];\n          for (let i = zero; i < this.state.postdata.length; i++) {\n            if (this.state.postdata[i]._id === likeData._id) {\n              let newpostData = this.state.postdata;\n              newpostData[i].likes = likeData.likes;\n              this.setState({ postdata: newpostData });\n            }\n          }\n        }\n      })\n      .catch(err => {\n        this.setState({ hasError: true });\n      });\n  };\n\n  stateUpdateOnTimelineClick = async () => {\n    this.setState({\n      items: zero\n    });\n    myUploads = false;\n    hasMoreItems = true;\n    await this.totalNumberPosts();\n    await this.allPost(this.state.items);\n  };\n\n  uploadCategory = event => {\n    event.preventDefault();\n    let newCategory = event.target.category.value;\n    const categoryToBeUploaded = { category: newCategory };\n    fetchData(Category, categoryToBeUploaded)\n      .then(res => {\n        if (res && res.data && res.data.status === \"Category Inserted\") {\n          let allCategory = res?.data?.dataFromDatabase?.map(data => {\n            return data;\n          });\n          this.props.updateCategory(allCategory);\n        }\n        if (res && res.data?.status === \"Already Exist\") {\n          alert(\"This category already exist\");\n        }\n      })\n      .catch(err => {\n        if (err.message === \"Network Error\") {\n          this.props.history.push(\"/errorpage\");\n        }\n      });\n    clicked = false;\n    document.getElementById(\"category\").innerHTML = \"\";\n  };\n\n  handlePostUploadForm(event) {\n    event.preventDefault();\n    if (event?.target?.category?.value === \"none\") {\n      document.getElementById(\"category123\").focus();\n    } else {\n      let category = event.target.category.value;\n      let file = event.target.file.files[0];\n      let caption = event.target.description.value;\n      let userName = username;\n      let userEmail = emailId;\n      const formdata = new FormData();\n      formdata.append(\"username\", userName);\n      formdata.append(\"email\", userEmail);\n      formdata.append(\"caption\", caption);\n      formdata.append(\"category\", category);\n      formdata.append(\"file\", file);\n      // Axios.post(Server.ServerUrl + Server.Routes.Upload, formdata);\n      fetchData(Upload, formdata)\n        .then(res => {\n          if (res && res.data?.status === \"Post Inserted\") {\n            this.allPost(zero);\n          } else {\n            alert(\"not inserted\");\n          }\n          this.togglePopup();\n        })\n        .catch(err => {\n          this.setState({ hasError: true });\n        });\n    }\n  }\n\n  togglePopup = () => {\n    this.setState({\n      showPopup: !this.state.showPopup\n    });\n  };\n\n  loadMorePosts = () => {\n    if (this.state.items <= totalPosts) {\n      setTimeout(async () => {\n        await this.allPost(this.state.items);\n      }, 1000);\n    } else {\n      hasMoreItems = false;\n    }\n    return new Promise(resolve => {\n      resolve(true);\n    });\n  };\n\n  allPost = skipPosts => {\n    const post = {\n      Skip: skipPosts,\n      email: myUploads ? emailId : false\n    };\n    fetchData(AllPosts, post)\n      .then(res => {\n        if (res) {\n          let allPostsData = res.data?.dataFromDatabase;\n          if (skipPosts === zero) {\n            this.setState({\n              postdata: allPostsData,\n              items: skipPosts + 5\n            });\n          } else {\n            this.setState({\n              postdata: [...this.state.postdata, ...allPostsData],\n              items: skipPosts + 5\n            });\n          }\n        }\n      })\n      .catch(err => {\n        this.setState({ hasError: true });\n      });\n  };\n\n  showMyUploads = async () => {\n    this.setState({\n      items: zero\n    });\n    myUploads = true;\n    hasMoreItems = true;\n    await this.totalNumberPosts();\n    await this.allPost(this.state.items);\n  };\n\n  checkIfNotlogin = () => {\n    if (!localStorage.getItem(\"userId\")) {\n      this.props.history.push(\"/login\");\n    }\n  };\n\n  setupSocket = () => {\n    const { endpoint } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"FromAPI\", data => this.setState({ response: data }));\n  };\n\n  render() {\n    const { hasError, showPopup, postdata, items } = this.state;\n    if (hasError) {\n      return (\n        <div>\n          <h1 style={{ padding: \"200px 450px\", color: \"#f47b13\" }}>\n            404 | Something went wrong\n          </h1>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <TimelineBodyComponent\n          togglePopup={this.togglePopup.bind(this)}\n          categoryUploadForm={this.categoryUploadForm}\n          uploadCategory={this.uploadCategory}\n          username={username}\n          showMyUploads={this.showMyUploads}\n          stateUpdateOnTimelineClick={this.stateUpdateOnTimelineClick}\n          handlePostUploadForm={this.handlePostUploadForm}\n          items={items}\n          loadMorePosts={this.loadMorePosts}\n          hasMoreItems={hasMoreItems}\n          postdata={postdata}\n          likePost={this.likePost}\n          showPopup={showPopup}\n          hasError={hasError}\n          downLoad={this.DownloadImage}\n        />\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { category: state.CategoryReducer.category };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data)),\n    updateCategory: data => dispatch(updateCategories(data)),\n    resetLoginState: () => dispatch(resetLoginState())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timeline);\n"]},"metadata":{},"sourceType":"module"}