{"ast":null,"code":"var _jsxFileName = \"/home/com109/Desktop/ad/my-app/src/screens/timeline.js\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\"; // import socketIOClient from \"socket.io-client\";\n\nimport { updateLoginState, updateCategories, resetLoginState } from \"../redux/actions\";\nimport serverCall from \"../utilsFolder/utils\";\nimport { ErrorMessage } from \"../utilsFolder/utils\";\nimport { Routes, ServerUrl } from \"../config\";\nimport TimelineBodyComponent from \"../components/timeline/timelineBodyComponent\";\nconst {\n  Likes_Post,\n  Upload,\n  AllPosts,\n  UserData,\n  TotalNumberOfPosts\n} = Routes;\nconst zero = 0; // let clicked = false;\n\nlet username = \"\";\nlet emailId = \"\";\nlet myUploads = false; // let endpoint = ServerUrl;\n\nlet hasError = false; // const categoryUploadForm = function() {\n//   if (!clicked) {\n//     clicked = true;\n//     const form =\n//       \"category<input type='text' name='category' required/><br /><br /><input type='submit'/> &emsp;\";\n//     document.getElementById(\"category\").innerHTML = form;\n//   } else {\n//     document.getElementById(\"category\").innerHTML = \"\";\n//     clicked = false;\n//   }\n// };\n// const setupSocket = function() {\n//   const socket = socketIOClient(endpoint);\n//   socket.on(\"FromAPI\", data => (this.response = data));\n// };\n// const uploadCategory = function(event) {\n//   event.preventDefault();\n//   let newCategory = event.target.category.value;\n//   const categoryToBeUploaded = { category: newCategory };\n//   serverCall(Category, categoryToBeUploaded)\n//     .then(res => {\n//       if (res && res.data && res.data.status === \"Category Inserted\") {\n//         let allCategory = res?.data?.dataFromDatabase?.map(data => {\n//           return data;\n//         });\n//         this.props.updateCategory(allCategory);\n//       }\n//       if (res && res.data?.status === \"Already Exist\") {\n//         alert(\"This category already exist\");\n//       }\n//     })\n//     .catch(err => {\n//       if (err.message === \"Network Error\") {\n//         this.props.history.push(\"/errorpage\");\n//       }\n//     });\n//   // clicked = false;\n//   document.getElementById(\"category\").innerHTML = \"\";\n// };\n// const handlePostUploadForm = function(event) {\n//   event.preventDefault();\n//   if (event?.target?.category?.value === \"none\") {\n//     document.getElementById(\"category123\").focus();\n//   } else {\n//     let category = event.target.category.value;\n//     let file = event.target.file.files[0];\n//     let caption = event.target.description.value;\n//     let userName = username;\n//     let userEmail = emailId;\n//     const formdata = new FormData();\n//     formdata.append(\"username\", userName);\n//     formdata.append(\"email\", userEmail);\n//     formdata.append(\"caption\", caption);\n//     formdata.append(\"category\", category);\n//     formdata.append(\"file\", file);\n//     serverCall(Upload, formdata).then(res => {\n//       if (res && res.data?.status === \"Post Inserted\") {\n//         this.allPost(zero);\n//       } else {\n//         alert(\"not inserted\");\n//       }\n//       this.togglePopup();\n//     });\n//   }\n// };\n\nconst Timeline = props => {\n  this.totalNumberPosts();\n  const [hasMoreItems, setHasMoreItems] = useState(true);\n  const [postdata, setPostdata] = useState([]);\n  const [showPopup, setShowPopup] = useState(false);\n  const [items, setItems] = useState(zero);\n  const [totalPosts, setTotalPosts] = useState(zero);\n  useEffect(() => {\n    totalNumberPosts();\n    checkIfNotlogin();\n    props.updateLoginState(localStorage.getItem(\"userId\")); // this.setupSocket();\n\n    userDetails();\n  });\n\n  const userDetails = function () {\n    let UserID = {\n      id: localStorage.getItem(\"userId\")\n    };\n    serverCall(UserData, UserID).then(res => {\n      var _res$data$zero, _res$data$zero2;\n\n      if (res && res.data) username = (_res$data$zero = res.data[zero]) === null || _res$data$zero === void 0 ? void 0 : _res$data$zero.username;\n      emailId = (_res$data$zero2 = res.data[zero]) === null || _res$data$zero2 === void 0 ? void 0 : _res$data$zero2.email;\n    });\n  };\n\n  const checkIfNotlogin = function () {\n    if (!localStorage.getItem(\"userId\")) {\n      this.props.history.push(\"/login\");\n    }\n  };\n\n  const DownloadImage = function (image) {\n    fetch(ServerUrl + \"/\" + image).then(response => {\n      response.blob().then(blob => {\n        let url = window.URL.createObjectURL(blob);\n        let a = document.createElement(\"a\");\n        a.href = url;\n        a.download = image;\n        a.click();\n      });\n    });\n  };\n\n  const totalNumberPosts = async function () {\n    const data = {\n      email: myUploads ? emailId : null\n    };\n    serverCall(TotalNumberOfPosts, data).then(res => {\n      if (res && res.data) {\n        var _res$data;\n\n        setTotalPosts((_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.counts); // this.totalPosts = res.data?.counts;\n      }\n    });\n  };\n\n  const likePost = function (postID) {\n    let likedData = {\n      postId: postID,\n      userId: localStorage.getItem(\"userId\")\n    };\n    serverCall(Likes_Post, likedData).then(res => {\n      if (res === null || res === void 0 ? void 0 : res.data) {\n        var _res$data2;\n\n        let likeData = res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.dataFromDatabase[0];\n\n        for (let i = zero; i < postdata.length; i++) {\n          if (postdata[i]._id === likeData._id) {\n            let newpostData = postdata;\n            newpostData[i].likes = likeData.likes;\n            setPostdata(newpostData);\n          }\n        }\n      }\n    });\n  };\n\n  stateUpdateOnTimelineClick = async () => {\n    setHasMoreItems(true);\n    setItems(zero);\n    myUploads = false;\n    await this.totalNumberPosts();\n    await this.allPost(items);\n  };\n\n  togglePopup = () => {\n    setShowPopup(!showPopup);\n  };\n\n  loadMorePosts = () => {\n    if (totalPosts) {\n      if (totalPosts >= items) {\n        setTimeout(async () => {\n          await this.allPost(items);\n        }, 1000);\n      } else {\n        setHasMoreItems(false);\n      }\n\n      return new Promise(resolve => {\n        resolve(true);\n      });\n    } else {\n      return;\n    }\n  };\n\n  allPost = skipPosts => {\n    const post = {\n      Skip: skipPosts,\n      email: myUploads ? emailId : false\n    };\n    serverCall(AllPosts, post).then(res => {\n      if (res) {\n        var _res$data3;\n\n        let allPostsData = (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : _res$data3.dataFromDatabase;\n\n        if (skipPosts === zero) {\n          setPostdata(allPostsData);\n          setItems(skipPosts + 5);\n        } else {\n          setItems(skipPosts + 5);\n          setPostdata([...postdata, ...allPostsData]); // this.setState({\n          //   items: skipPosts + 5,\n          //   postdata: [...this.state.postdata, ...allPostsData]\n          // });\n        }\n      }\n    });\n  };\n\n  showMyUploads = async () => {\n    setHasMoreItems(true);\n    setItems(zero);\n    myUploads = true;\n    await this.totalNumberPosts();\n    await this.allPost(items);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }, React.createElement(TimelineBodyComponent, {\n    togglePopup: this.togglePopup.bind(this) // categoryUploadForm={this.categoryUploadForm}\n    // uploadCategory={this.uploadCategory}\n    ,\n    username: username,\n    showMyUploads: this.showMyUploads,\n    stateUpdateOnTimelineClick: this.stateUpdateOnTimelineClick,\n    handlePostUploadForm: this.handlePostUploadForm,\n    items: items,\n    loadMorePosts: this.loadMorePosts,\n    hasMoreItems: hasMoreItems,\n    postdata: postdata,\n    likePost: this.likePost,\n    showPopup: showPopup,\n    hasError: hasError,\n    downLoad: this.DownloadImage,\n    emailId: emailId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }));\n};\n\nfunction mapStateToProps(state) {\n  return {\n    category: state.CategoryReducer.category\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data)),\n    updateCategory: data => dispatch(updateCategories(data)),\n    resetLoginState: () => dispatch(resetLoginState())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timeline);","map":{"version":3,"sources":["/home/com109/Desktop/ad/my-app/src/screens/timeline.js"],"names":["React","useEffect","connect","updateLoginState","updateCategories","resetLoginState","serverCall","ErrorMessage","Routes","ServerUrl","TimelineBodyComponent","Likes_Post","Upload","AllPosts","UserData","TotalNumberOfPosts","zero","username","emailId","myUploads","hasError","Timeline","props","totalNumberPosts","hasMoreItems","setHasMoreItems","useState","postdata","setPostdata","showPopup","setShowPopup","items","setItems","totalPosts","setTotalPosts","checkIfNotlogin","localStorage","getItem","userDetails","UserID","id","then","res","data","email","history","push","DownloadImage","image","fetch","response","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","click","counts","likePost","postID","likedData","postId","userId","likeData","dataFromDatabase","i","length","_id","newpostData","likes","stateUpdateOnTimelineClick","allPost","togglePopup","loadMorePosts","setTimeout","Promise","resolve","skipPosts","post","Skip","allPostsData","showMyUploads","bind","handlePostUploadForm","mapStateToProps","state","category","CategoryReducer","mapDispatchToProps","dispatch","updateCategory"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\n// import socketIOClient from \"socket.io-client\";\n\nimport {\n  updateLoginState,\n  updateCategories,\n  resetLoginState\n} from \"../redux/actions\";\nimport serverCall from \"../utilsFolder/utils\";\nimport { ErrorMessage } from \"../utilsFolder/utils\";\nimport { Routes, ServerUrl } from \"../config\";\nimport TimelineBodyComponent from \"../components/timeline/timelineBodyComponent\";\n\nconst { Likes_Post, Upload, AllPosts, UserData, TotalNumberOfPosts } = Routes;\n\nconst zero = 0;\n// let clicked = false;\nlet username = \"\";\nlet emailId = \"\";\nlet myUploads = false;\n// let endpoint = ServerUrl;\nlet hasError = false;\n\n// const categoryUploadForm = function() {\n//   if (!clicked) {\n//     clicked = true;\n//     const form =\n//       \"category<input type='text' name='category' required/><br /><br /><input type='submit'/> &emsp;\";\n//     document.getElementById(\"category\").innerHTML = form;\n//   } else {\n//     document.getElementById(\"category\").innerHTML = \"\";\n//     clicked = false;\n//   }\n// };\n\n// const setupSocket = function() {\n//   const socket = socketIOClient(endpoint);\n//   socket.on(\"FromAPI\", data => (this.response = data));\n// };\n\n// const uploadCategory = function(event) {\n//   event.preventDefault();\n//   let newCategory = event.target.category.value;\n//   const categoryToBeUploaded = { category: newCategory };\n//   serverCall(Category, categoryToBeUploaded)\n//     .then(res => {\n//       if (res && res.data && res.data.status === \"Category Inserted\") {\n//         let allCategory = res?.data?.dataFromDatabase?.map(data => {\n//           return data;\n//         });\n//         this.props.updateCategory(allCategory);\n//       }\n//       if (res && res.data?.status === \"Already Exist\") {\n//         alert(\"This category already exist\");\n//       }\n//     })\n//     .catch(err => {\n//       if (err.message === \"Network Error\") {\n//         this.props.history.push(\"/errorpage\");\n//       }\n//     });\n//   // clicked = false;\n//   document.getElementById(\"category\").innerHTML = \"\";\n// };\n\n// const handlePostUploadForm = function(event) {\n//   event.preventDefault();\n//   if (event?.target?.category?.value === \"none\") {\n//     document.getElementById(\"category123\").focus();\n//   } else {\n//     let category = event.target.category.value;\n//     let file = event.target.file.files[0];\n//     let caption = event.target.description.value;\n//     let userName = username;\n//     let userEmail = emailId;\n//     const formdata = new FormData();\n//     formdata.append(\"username\", userName);\n//     formdata.append(\"email\", userEmail);\n//     formdata.append(\"caption\", caption);\n//     formdata.append(\"category\", category);\n//     formdata.append(\"file\", file);\n//     serverCall(Upload, formdata).then(res => {\n//       if (res && res.data?.status === \"Post Inserted\") {\n//         this.allPost(zero);\n//       } else {\n//         alert(\"not inserted\");\n//       }\n//       this.togglePopup();\n//     });\n//   }\n// };\n\nconst Timeline = props => {\n  this.totalNumberPosts();\n  const [hasMoreItems, setHasMoreItems] = useState(true);\n  const [postdata, setPostdata] = useState([]);\n  const [showPopup, setShowPopup] = useState(false);\n  const [items, setItems] = useState(zero);\n  const [totalPosts, setTotalPosts] = useState(zero);\n\n  useEffect(() => {\n    totalNumberPosts();\n    checkIfNotlogin();\n    props.updateLoginState(localStorage.getItem(\"userId\"));\n    // this.setupSocket();\n    userDetails();\n  });\n\n  const userDetails = function() {\n    let UserID = { id: localStorage.getItem(\"userId\") };\n    serverCall(UserData, UserID).then(res => {\n      if (res && res.data) username = res.data[zero]?.username;\n      emailId = res.data[zero]?.email;\n    });\n  };\n\n  const checkIfNotlogin = function() {\n    if (!localStorage.getItem(\"userId\")) {\n      this.props.history.push(\"/login\");\n    }\n  };\n\n  const DownloadImage = function(image) {\n    fetch(ServerUrl + \"/\" + image).then(response => {\n      response.blob().then(blob => {\n        let url = window.URL.createObjectURL(blob);\n        let a = document.createElement(\"a\");\n        a.href = url;\n        a.download = image;\n        a.click();\n      });\n    });\n  };\n\n  const totalNumberPosts = async function() {\n    const data = { email: myUploads ? emailId : null };\n    serverCall(TotalNumberOfPosts, data).then(res => {\n      if (res && res.data) {\n        setTotalPosts(res.data?.counts);\n        // this.totalPosts = res.data?.counts;\n      }\n    });\n  };\n\n  const likePost = function(postID) {\n    let likedData = {\n      postId: postID,\n      userId: localStorage.getItem(\"userId\")\n    };\n    serverCall(Likes_Post, likedData).then(res => {\n      if (res?.data) {\n        let likeData = res?.data?.dataFromDatabase[0];\n        for (let i = zero; i < postdata.length; i++) {\n          if (postdata[i]._id === likeData._id) {\n            let newpostData = postdata;\n            newpostData[i].likes = likeData.likes;\n            setPostdata(newpostData);\n          }\n        }\n      }\n    });\n  };\n\n  stateUpdateOnTimelineClick = async () => {\n    setHasMoreItems(true);\n    setItems(zero);\n    myUploads = false;\n    await this.totalNumberPosts();\n    await this.allPost(items);\n  };\n\n  togglePopup = () => {\n    setShowPopup(!showPopup);\n  };\n\n  loadMorePosts = () => {\n    if (totalPosts) {\n      if (totalPosts >= items) {\n        setTimeout(async () => {\n          await this.allPost(items);\n        }, 1000);\n      } else {\n        setHasMoreItems(false);\n      }\n      return new Promise(resolve => {\n        resolve(true);\n      });\n    } else {\n      return;\n    }\n  };\n\n  allPost = skipPosts => {\n    const post = {\n      Skip: skipPosts,\n      email: myUploads ? emailId : false\n    };\n    serverCall(AllPosts, post).then(res => {\n      if (res) {\n        let allPostsData = res.data?.dataFromDatabase;\n        if (skipPosts === zero) {\n          setPostdata(allPostsData);\n          setItems(skipPosts + 5);\n        } else {\n          setItems(skipPosts + 5);\n          setPostdata([...postdata, ...allPostsData]);\n          // this.setState({\n          //   items: skipPosts + 5,\n          //   postdata: [...this.state.postdata, ...allPostsData]\n          // });\n        }\n      }\n    });\n  };\n\n  showMyUploads = async () => {\n    setHasMoreItems(true);\n    setItems(zero);\n    myUploads = true;\n    await this.totalNumberPosts();\n    await this.allPost(items);\n  };\n  return (\n    <div>\n      <TimelineBodyComponent\n        togglePopup={this.togglePopup.bind(this)}\n        // categoryUploadForm={this.categoryUploadForm}\n        // uploadCategory={this.uploadCategory}\n        username={username}\n        showMyUploads={this.showMyUploads}\n        stateUpdateOnTimelineClick={this.stateUpdateOnTimelineClick}\n        handlePostUploadForm={this.handlePostUploadForm}\n        items={items}\n        loadMorePosts={this.loadMorePosts}\n        hasMoreItems={hasMoreItems}\n        postdata={postdata}\n        likePost={this.likePost}\n        showPopup={showPopup}\n        hasError={hasError}\n        downLoad={this.DownloadImage}\n        emailId={emailId}\n      />\n    </div>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return { category: state.CategoryReducer.category };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateLoginState: data => dispatch(updateLoginState(data)),\n    updateCategory: data => dispatch(updateCategories(data)),\n    resetLoginState: () => dispatch(resetLoginState())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Timeline);\n"]},"metadata":{},"sourceType":"module"}